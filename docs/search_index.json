[
["index.html", "Playing Data with R About 自述 學程式這回事", " Playing Data with R JILUNG HSIEH 2020-02-17 About 自述 2016年有幸可以到臺灣大學新聞所帶領一群未來的記者學習資料分析的技巧。說是資料分析，不如說是程式設計。當時紐約時報、國際上各大報紙大量地產製資料新聞，嘗試用資料搭配視覺化來敘事，或者透過資料探勘方法，挖掘數字、資料背後的異常現象、趨勢、分佈等等。 為了兼顧每一位學生的學習情形，特地採用小班教學，但卻有不少外系的學生也一起到課堂上來學習，因而以每個學期開課、每堂課最多三十人的模式授課。這樣頻繁授課的好處是，可以反覆地、快速地嘗試各種不同的授課方式，並且在次學期授課中進行調整。而這本書則是在授課過程零星所記錄下來的經驗和知識。 2016年開始在臺大教書的那個暑假，我其實擅長的程式語言是Python，且有二至三年開授「社會科學程式設計:ProgrammingforSocialScience」的經驗。但到任前單位主管希望我能夠以R為主要授課語言，單位主管和紐約時報的圖表編輯部門有數年的互動，她告訴我紐約時報圖表記者們都用R語言。而在2016年的當時，北臺灣業界和研究單位所開授的網路爬蟲、資料分析、機器學習等課程，都是以R為主要語言。顯然當時以Python為主要語言的「深度學習」族群尚未在臺灣發展起來(在2018年的現在，也就是我寫下這句話之時，其實臺灣熱門的是Python程式語言)。 那年暑假，我用了Datacamp來產生我對R語言的基礎認識、聽了二至三門Coursera上的R語言課程來了解R語言的授課方式、參考了三至四份以R為語言的國外課程教材、甚至自費參與由臺灣業界一群熱心的工程師所開發的網路爬蟲課程、與當時臺灣資料科學年會所開發的「手把手教你資料分析」課程觀摩他人上課的節奏和使用範例，我非常感謝有這群先行者的努力和無私的分享，讓我在後續的課程安排上駕輕就熟。 在2016年國外所開設以R來進行資料分析的課程也不算多，但在2018年的今日，Stanford的PoliticalScience與Chicago的MasterofComputationalSocialScience均開設了質量非常高的R在社會科學應用上的課程，Stanford的PoliticalScience甚至將其拆解為150A、150B、150C三門課程來授課。 基於這樣的出發點，所以這本書的核心對象就是從沒有寫過程式的大學生。 學程式這回事 何謂演算法？ 演算法（Algorithm）為處理事情、解決問題的邏輯，多取自日常生活的問題解決步驟。例如Google用以排名搜尋結果的「PageRanking」即參考自人與人之間，如何透過每次的訊息交換，建立起人的聲望。而推薦機制的核心概念「協同式推薦」，則仿自市集群眾購物行為的共同喜好、熱門物品等機制。 而程式語言（ProgrammingLanguage）則是演算法的實作。定義一套機器能夠編譯的語法，將演算法實作出來。脫離程式語法的演算法也可以被英文邏輯性地加以表徵，被稱之為「Pseudo-code」。一段典型的Pseudo-code如下，描述了ATM提款機如何提款與存款的決策步驟。 Ifoption=depositthen Output&#39;Enteramounttodeposit&#39; Inputamount balance=balance+amount Ifoption=withdrawalthen Output&#39;Enteramounttowithdraw&#39; Inputamount balance=balance-amount Output&#39;Balanceis&#39;balance 因此，程式語言的學習，則類似將日常生活的處事方法，用正確的邏輯方式來表達，並用一種指定的語言來描述。準此，程式語言的學習是「語言與邏輯」。而回想我們如何學會英文或者有天突然覺得自己將英文的運用推到另一個層次之上時，往往有一番自己的方法和領會，多半來自於個人目標與適合個人的學習方法，例如，考TOEIC、TOFEL、GRE，看美國影集、看英文原版小說，或者為了打電玩。 掌握課外學習資源 現在網路上自學資源非常多，尤其是各家線上開放課程，或者是code.org、Datacamp等線上互動學習平台，所以我在授課的過程，我多半是在課堂上強調程式語言中的關鍵技術、使用方法、使用時機和比較彼此間的差異，我甚少把一個概念和各種可用的函式在課堂上講完全，反而建議學生可以透過買書、上線上的課程來相互補充。我那時衍生了一個口頭禪是「聽一次聽不懂」 "],
["data-journalism.html", "Chapter 1 Data Journalism 1.1 What-is 什麼是資料新聞？ 1.2 何謂資料？ 1.3 資料的詮釋 1.4 Where-is data? 資料在哪裡？ 1.5 What does data look like?", " Chapter 1 Data Journalism 1.1 What-is 什麼是資料新聞？ 我其實很少在談論何謂資料新聞，或者為他下定義。但我還蠻喜歡一位台籍資料新聞記者林辰峰在某一次受邀回國演講後所講的一段動機。 想像你是一名記者，一名追求事實，挖掘真相的記者。你對政治獻金相關議題很有興趣，做訪前研究時，發現網路上有多筆龐大政治獻金數據。你盯著電腦螢幕，看著眼前一筆又一筆的數據。你順手點了滑鼠右鍵，希望下載這份資料庫，卻發現網頁不開放右鍵下載。「或許我應該將這些數據一筆一筆抄下來。」你或許會這樣告訴自己。無奈數據共有數萬筆，書手抄寫容易犯錯又耗時。你單手托腮，無奈地嘆了一口氣。你肯定新聞就藏在這些數據裡，但卻不知該如何是好。文章來源： https://www.twreporter.org/a/opinion-data-journalist 接著，我們可以從一些資料新聞的案例，來看看何謂資料新聞。 1. Melissa Etehad &amp; Jeremy C.F. Lin (2016-08-13). The world is getting better at paid maternity leave. The U.S. is not. The Washington Post.。這篇的第二作者即為前述所提到的林辰峰（Jeremy Lin），他當時人在華盛頓郵報。 2. 田孟心（2016-12-15）。頂加房子租多貴？天下雜誌。。這位作者是現在的天下雜誌記者，當時他與另一位天下的資料新聞記者林佳賢一起維護Dataman這個臉書粉絲團。那應該是該記者剛接觸資料分析和程式設計的第一年。 3. 邱學慈（2019-01-08）。PTT原始資料全揭露！「韓流」怎麼造出來的？天下雜誌。 大約在2018年暑假的時候邱學慈才剛利用暑期課程學完R，之後在下學期便修了台大新聞所Adrian教授的社會網絡分析課程，便延伸在天下做了這樣的作品。 其實從這些例子的時間大概可看到，學習程式只是一種用來處理資料的功夫，你也可以用EXCEL或者Google sheet來處理資料，只要你能夠處理這些資料，那我想你就有辦法寫作資料新聞。所以我比較傾向於前述林辰峰的說法，資料新聞的開始是一種從資料中發掘事實的動機。如果你有那個動機，那大概過程的技術問題你都會去克服；相反的如果沒有那個動機，那大概學了程式也不知道能夠做什麼。 1.2 何謂資料？ 並不是所有人所認定的「資料」的概念都是相同的，比方來說，從網路上可獲得有觀察值和統計資料兩大種。 觀察值（Observation）：每一列就是一次的觀察，比方說紀錄所有登革熱案例的發生地點、鄰里，或是空氣品質資料測站的歷史紀錄、或是紀錄PTT上面誰曾經回應過誰、或是臉書上的競選廣告資料（花多少錢、打什麼年齡層、打多久）也是屬於觀察值資料。這種觀察值資料不多，多半出現在輿論資料或者新聞資料等尚未彙整過的資料。未彙整的資料多半資料量龐大，很少用開放資料的方式被分享。這類紀錄資料通常要進一步進行彙整才能夠繪圖或者做分析。在登革熱近12個月每日確定病例統計的資料中，就字面上看來是統計資料，但實際上資料是一筆一筆紀錄每個案例的狀況，所以應該是觀察值資料，而非統計資料，這標題有「統計」兩個字不太恰當。 統計資料：指的是該資料呈現的是根據某個或者某幾個變數所計數（counting）的資料，是最常見的資料。例如台北市每小時在每個區有多少竊盜案、逐年的死因統計資料、內政部的各縣市鄉鎮的性別、教育程度、婚姻狀況的人口數。 統計資料有幾種不同的情形會攸關資料分析能夠發揮的程度。大概分成一下幾種情形： 1. 資料是比例資料: 比例資料是資料分析上最不樂見的資料型態，會使得資料完全無法結合其他的資料表。偏偏很多政府單位開放出來是這種型態，例如各地區的女警比例、大專院校教務會議的女性成員比例。不過有些比例資料是有意義的，例如逐週醫療院所的類流感就診所佔比例，可以知道來看病的病人中大概有多少比例是有流感症狀的，這可以代表流感流行的嚴重程度。 2. 資料是平均過後的資料：通常這類的資料難以結合其他的資料進行加工。但ETC的資料就是這類的資料，他每五分鐘就紀錄了一個路段的大客車數以及其平均速率。 3. 資料已經被做成二維的資料表：通常我們會希望，每一個欄就是一個變數，例如性別、年齡組、婚姻狀況、教育程度等等，都是一個直欄上的變數。但有時候政府公布的資料已經是產製成該單位的年度報告或新聞資訊的報告圖表了，所以會是以兩個變項分別在欄與列的方式來呈現。例如性別x年齡組的表格、婚姻狀況x教育程度的表格。這類資料經常缺少基本單位，例如「鄉鎮市區」或者「時間區間」等等。 1.3 資料的詮釋 記者在做的事情顯然就是在詮釋資料。這篇文章的作者提供了數個例子來教我們資料詮釋時可能會產生的謬誤。 Kate Crawford (2013) The Hidden Biases in Big Data Crawford（2013）一文曾提及使用資料分析可能帶來的謬誤。例如當Sandy颱風侵襲美東時，有研究在蒐集Twitter的資料後發現，如預期中雜貨店的購物行為提升，但非預期中地，夜生活卻在颱風來襲後增多，也許是cabin fever strikes。但該篇報導認為這樣的資料大多蒐集自曼哈頓，顯然不是嚴重受到侵襲的區域。他認為「Data are assumed to accurately reflect the social world, but there are significant gaps, with little or no signal coming from particular communities.」 他舉了另外一個例子是，Boston設計了一個StreetBump smartphone app，透過偵測手機的震動來知道哪一些路段有洞。但這篇文章認為，有些有數位落差的區域，尤其是老人，顯然會因此偏重在那些具有數位資源的區域misallocating important public resources。這也沒錯，但現在手機上看報紙那麼方便，到處都沒電話亭，這樣就有處理了數位落差的問題嗎？ 他又舉了Google Trend預測流感為例，比CDC整整高估了兩倍，雖然可以解釋說，Google上面的media coverage導致重複資訊不斷出現，但他認為這樣做可能會造成政府錯估疫情？這我也覺得很妙，看疫情是看趨勢，CDC說的6%也不見得對，說不定還有潛藏疫情，不知道為何要用一種為了打資料科學而雞蛋裡挑骨頭的毛病來寫作？作者提到，政府可能會因為這樣而產生資源分配不均，但我認為這三個例子到資源分配的決策都還非常遙遠。 基本上，「資料的詮釋」通常只能反映出記者或研究者本身對某個事件或現象的詮釋角度。資料詮釋所反映的不是真實，也不是社會現實。我們在過去的經驗中，經常可以發現從資料或視覺化的操弄，往往可以讓使用者迷失焦點，甚至獲得完全相反方向的結果。因此，詮釋時其實經常陷於報導與資料的兩難，經常遇到資料量過度稀少，即使要說明一個現象，證據數量不夠、說服力不夠。但，所幸新聞是一個即使是少數樣本亦值得說明其狀況的文本，專注說明資料的outlier，也許就是所謂「新聞點」的產生地。唯一要記得的是，不可把少數人的現象過分推論到整個母體或群體，這是資料新聞寫作上常犯的錯誤。 1.4 Where-is data? 資料在哪裡？ Exercise 1.1 (Where is data?) 請問在Alexa網站流量調查「Top Sites in Taiwan」所列的Top 100網站中，哪些網站可能具有資料分析價值？或者哪些網站可能具有新聞價值？ 1.5 What does data look like? 由於R其實是一個統計軟體，因此對於怎麼操作它，只要有一點統計的思維就會非常容易入屎。簡單地說，就是用變項（Variable）來想像所有的資料。對普遍的資料而言，橫列（Row）就是資料項，直欄（Column）就是變項欄。對於部分自認為統計都快忘光的初學者，直接用R來思考很容易有熟悉感；對於完全沒統計基礎的初學者，則建議用資料表（如Microsoft Excel或Google sheet）來想像它。 "],
["r-.html", "Chapter 2 R語言基礎速遊 2.1 RStudio 基本操作 2.2 用R載入資料 2.3 儲存現有變數 2.4 查詢函式的定義", " Chapter 2 R語言基礎速遊 2.1 RStudio 基本操作 2.1.1 執行R Markdown 執行程式碼Cmd+Enter(Ctrl+Enter in Window) 執行某一「道」程式碼描述。 執行程式碼Cmd(Ctrl)+Shift+Enter 執行某一個R markdown程式碼區塊中所有程式碼 新增程式碼區塊：Cmd(Ctrl)+Option(Alt)+i產生一個新的R Markdown程式碼區塊。 註解：用滑鼠選擇你所要註解或取消註解的程式碼，然後按Cmd(Ctrl)+Shift+c 一次做多行程式碼註解／取消註解。. a &lt;- c(1, 2, 3, 4, 5) b &lt;- 4 a*b ## [1] 4 8 12 16 20 2.1.2 安裝第三方套件 套件的使用分為安裝和載入兩個動作。通常安裝好R的時候就已經安裝好基本base套件。當執行R時便會將base套件預載入程式的執行環境中。非常多的R使用者會編寫第三方套件，並且將這些套件開放給群眾使用。通常這些套件已經被上載到R cran提供下載。而R cran上的套件我們可以使用install.packages(\"package_name\")來自動安裝到我們的電腦中。例如install.packages(\"tidyverse\")。 Exercise 2.1 (Installing packages) 安裝以下套件：tidyverse, caret, jiebaR, stm, sf 2.1.3 載入第三方套件 這些第三方套件被安裝好後，還需要被加載到程式的執行環境中才可以使用。因此要用library(package_name)將其載入。 library(jsonlite) ## Warning: package &#39;jsonlite&#39; was built under R version 3.5.2 library(httr) ## Warning: package &#39;httr&#39; was built under R version 3.5.2 Exercise 2.2 (Loading packages) 用library(package_name)載入已經安裝好的jsonlite與httr Exercise 2.3 (loading packages) 你可以用下面的程式碼一次載入多個套件。概念是，把你要安裝的套件名稱存成一個vector，然後偵測看看該套件是否已經安裝過了。如果有任何套件沒安裝過，就把那些套件給安裝了。 2.1.4 註解 下列程式碼中開頭有#符號者為註解，程式在執行時會自動忽略前面有#符號的程式碼。 # a &lt;- c(1, 2, 3, 4, 5) # b &lt;- 4 # a*b 2.2 用R載入資料 你這時候可能還沒用過R，先不要管以下每一行程式是什麼意思，就先使用看看、玩玩看。先看看RStudio怎麼執行R的程式，先看看R的資料長什麼樣子。 2.2.1 範例一：載入Dcard資料 先不要去管以下程式碼fromJSON(content(GET(url), \"text\"))是什麼意思，先著重在語言的形式。通常一個函式會寫為func_name()，所以上述其實是三個函式由內而外一層套一層，從最內層開始往外做。這其實很符合一般文字或數學邏輯，因為如果你有一個數學式(1 + (3-3)/2)/8，也是會從最裡面那層做出來。 url &lt;- &quot;https://www.dcard.tw/_api/forums/relationship/posts?popular=true&quot; res &lt;- fromJSON(content(GET(url), &quot;text&quot;)) dplyr::glimpse(res) ## Observations: 30 ## Variables: 33 ## $ id &lt;int&gt; 233084983, 233086073, 233084928, 233084935, 23308… ## $ title &lt;chr&gt; &quot;更。給所有男性，你被綠了！如果你的女友......&quot;, &quot;打了曖昧對象一巴掌#更&quot;, &quot;#更 … ## $ excerpt &lt;chr&gt; &quot;在這邊我先再次跟男方說聲很抱歉，我自私的決定，造成你的所有傷害，謝謝你的器度，也很抱歉這一切的發… ## $ anonymousSchool &lt;lgl&gt; TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE,… ## $ anonymousDepartment &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, T… ## $ pinned &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, … ## $ forumId &lt;chr&gt; &quot;42851318-b9e2-4a75-8a05-9fe180becefe&quot;, &quot;42851318… ## $ replyId &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ createdAt &lt;chr&gt; &quot;2020-02-16T01:46:28.555Z&quot;, &quot;2020-02-16T06:49:55.… ## $ updatedAt &lt;chr&gt; &quot;2020-02-17T10:13:57.285Z&quot;, &quot;2020-02-17T02:59:03.… ## $ commentCount &lt;int&gt; 532, 83, 54, 82, 36, 42, 19, 31, 50, 125, 11, 14,… ## $ likeCount &lt;int&gt; 9588, 6588, 3216, 2243, 1740, 1465, 1047, 879, 85… ## $ withNickname &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, F… ## $ tags &lt;list&gt; [&quot;HIDE_THUMBNAIL&quot;, &lt;&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, &quot;HIDE_THU… ## $ topics &lt;list&gt; [&lt;&quot;愛情&quot;, &quot;女友&quot;, &quot;感情&quot;, &quot;男性&quot;, &quot;結婚&quot;&gt;, &lt;&quot;愛情&quot;, &quot;曖昧&quot;, &quot;約… ## $ meta &lt;df[,1]&gt; &lt;data.frame[26 x 1]&gt; ## $ forumName &lt;chr&gt; &quot;感情&quot;, &quot;感情&quot;, &quot;感情&quot;, &quot;感情&quot;, &quot;感情&quot;, &quot;感情&quot;, &quot;感情&quot;, &quot;感情&quot;, &quot;… ## $ forumAlias &lt;chr&gt; &quot;relationship&quot;, &quot;relationship&quot;, &quot;relationship&quot;, &quot;… ## $ gender &lt;chr&gt; &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;M&quot;, &quot;F&quot;, &quot;F&quot;, &quot;M&quot;, &quot;F&quot;,… ## $ replyTitle &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ mediaMeta &lt;list&gt; [&lt;data.frame[0 x 0]&gt;, &lt;data.frame[6 x 8]&gt;, &lt;data… ## $ reactions &lt;list&gt; [&lt;data.frame[6 x 2]&gt;, &lt;data.frame[5 x 2]&gt;, &lt;data… ## $ hidden &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, … ## $ customStyle &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ isSuspiciousAccount &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, … ## $ layout &lt;chr&gt; &quot;classic&quot;, &quot;classic&quot;, &quot;classic&quot;, &quot;classic&quot;, &quot;clas… ## $ withImages &lt;lgl&gt; FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FA… ## $ withVideos &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, … ## $ media &lt;list&gt; [&lt;data.frame[0 x 0]&gt;, &lt;data.frame[5 x 1]&gt;, &lt;data… ## $ reportReasonText &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;… ## $ postAvatar &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;… ## $ school &lt;chr&gt; NA, NA, &quot;國立高雄大學&quot;, &quot;\\U0001f317&quot;, NA, NA, NA, NA, N… ## $ department &lt;chr&gt; NA, NA, NA, &quot;brybry20&quot;, NA, NA, NA, NA, NA, NA, N… head(res) ## id title ## 1 233084983 更。給所有男性，你被綠了！如果你的女友...... ## 2 233086073 打了曖昧對象一巴掌#更 ## 3 233084928 #更 直球這麼明顯了 就差一步了…… ## 4 233084935 畢書盡宣布結婚後 ## 5 233087674 我愛你 不要對不起 ## 6 233087302 賣閃光...洗澡時真的不要尿尿喔XD ## excerpt ## 1 在這邊我先再次跟男方說聲很抱歉，我自私的決定，造成你的所有傷害，謝謝你的器度，也很抱歉這一切的發生，我也會讓做錯事的人付出該有的責任，還有被條件所誤會的人，也向你們道歉，我也想跟女方說 我男友問題也 ## 2 更，沒想到超多人回應的哈哈哈哈哈哈，我們之後當然在一起了 萬歲~~，我男朋友覺得他應該會記得這件事一輩子哈哈，祝大家趕快脫單呦~，______________正文__________，應該是發感情版吧 ## 3 最近有個相處還不錯的對象，昨晚心血來潮，想說撩他一下，：我 ：他，以下為聊天紀錄，=============================，：我做什麼事都十拿九穩，但就是差你這一吻， ## 4 前幾天畢書盡宣布好消息之後，我就對前任感到好奇，便找了他的ig，很想安慰他 希望他找到更好的，結果今天我再次看到是，然後，我就去看了他的ig，我懂你難過 畢竟在一起很多年，但是畢已經宣布要結婚了，你又 ## 5 男友是先天性聽障 助聽器無用的那種。第一次遇到他 只覺得他看起來是個很熱情的人，即使當時我跟他溝通非常不熟練，他很積極的想吸引我的注意 逗我開心，而我是一個有點封閉到有溝通障礙的人，不是都不會說話 有 ## 6 跟大家分享一個洗澡尿尿的壞處XDD，事情發生在我女友身上，她是個沖澡時一定偷尿尿的人，每當溫暖的水柱包覆身體，她就會放鬆地把尿液給排出來~，__________________（進入正題）______ ## anonymousSchool anonymousDepartment pinned ## 1 TRUE TRUE FALSE ## 2 TRUE TRUE FALSE ## 3 FALSE TRUE FALSE ## 4 FALSE TRUE FALSE ## 5 TRUE TRUE FALSE ## 6 TRUE TRUE FALSE ## forumId replyId createdAt ## 1 42851318-b9e2-4a75-8a05-9fe180becefe NA 2020-02-16T01:46:28.555Z ## 2 42851318-b9e2-4a75-8a05-9fe180becefe NA 2020-02-16T06:49:55.774Z ## 3 42851318-b9e2-4a75-8a05-9fe180becefe NA 2020-02-16T01:19:38.961Z ## 4 42851318-b9e2-4a75-8a05-9fe180becefe NA 2020-02-16T01:22:27.607Z ## 5 42851318-b9e2-4a75-8a05-9fe180becefe NA 2020-02-16T12:19:33.456Z ## 6 42851318-b9e2-4a75-8a05-9fe180becefe NA 2020-02-16T11:10:38.057Z ## updatedAt commentCount likeCount withNickname tags ## 1 2020-02-17T10:13:57.285Z 532 9588 FALSE HIDE_THUMBNAIL ## 2 2020-02-17T02:59:03.001Z 83 6588 FALSE ## 3 2020-02-17T03:12:03.302Z 54 3216 FALSE ## 4 2020-02-16T01:22:27.607Z 82 2243 TRUE ## 5 2020-02-16T15:24:20.073Z 36 1740 FALSE ## 6 2020-02-16T11:10:38.057Z 42 1465 FALSE ## topics layout forumName forumAlias gender ## 1 愛情, 女友, 感情, 男性, 結婚 classic 感情 relationship F ## 2 愛情, 曖昧, 約會 classic 感情 relationship F ## 3 直球, 愛情, 氣死, 曖昧, 感情 classic 感情 relationship F ## 4 畢書盡, 結婚, 分手 classic 感情 relationship F ## 5 我愛你, 對不起, 心酸, 聽障, 男友 classic 感情 relationship F ## 6 女友, 愛情, 尿急, 廁所, 閃光 classic 感情 relationship M ## replyTitle ## 1 &lt;NA&gt; ## 2 &lt;NA&gt; ## 3 &lt;NA&gt; ## 4 &lt;NA&gt; ## 5 &lt;NA&gt; ## 6 &lt;NA&gt; ## mediaMeta ## 1 NULL ## 2 a38dd69c-c52c-477c-8ec8-7ae0d7ac42ae, a38dd69c-c52c-477c-8ec8-7ae0d7ac42ae, 923ec7df-510c-4197-9fb6-edbb42d0af89, 4ac99890-b56e-43c7-871e-0f834adfd744, f62e1a18-1a12-4e4d-a576-7d0a5d904c95, 30c4bbb1-38a8-4302-b6c6-55d791c50cd7, https://i.imgur.com/zdWZE8Kl.jpg, https://i.imgur.com/zdWZE8K.jpg, https://i.imgur.com/6RMIJ9E.jpg, https://i.imgur.com/W55VLqA.jpg, https://i.imgur.com/Our9jjE.jpg, https://i.imgur.com/OmZk3Bs.png, https://i.imgur.com/zdWZE8Kl.jpg, https://imgur.com/zdWZE8K, https://imgur.com/6RMIJ9E, https://imgur.com/W55VLqA, https://imgur.com/Our9jjE, https://imgur.com/OmZk3Bs, https://i.imgur.com/zdWZE8Kl.jpg, https://i.imgur.com/zdWZE8Kl.jpg, https://i.imgur.com/6RMIJ9El.jpg, https://i.imgur.com/W55VLqAl.jpg, https://i.imgur.com/Our9jjEl.jpg, https://i.imgur.com/OmZk3Bsl.jpg, image/thumbnail, image/imgur, image/imgur, image/imgur, image/imgur, image/imgur, ANNOTATED, ANNOTATED, ANNOTATED, ANNOTATED, ANNOTATED, ANNOTATED, 2020-02-16T06:49:55.774Z, 2020-02-16T06:49:55.774Z, 2020-02-16T06:49:55.774Z, 2020-02-16T06:49:55.774Z, 2020-02-16T06:49:55.774Z, 2020-02-16T06:49:55.774Z, 2020-02-17T02:59:03.001Z, 2020-02-17T02:59:03.001Z, 2020-02-17T02:59:03.001Z, 2020-02-17T02:59:03.001Z, 2020-02-17T02:59:03.001Z, 2020-02-17T02:59:03.001Z ## 3 NULL ## 4 a2315ba2-93ca-4883-8461-5a464b92336f, a2315ba2-93ca-4883-8461-5a464b92336f, bdda49f4-b976-4d64-8bc8-e271f766b77d, https://megapx-assets.dcard.tw/images/2c6e7a4a-e057-4ee0-b4a5-9813d026b7d1/640.jpeg, https://megapx-assets.dcard.tw/images/2c6e7a4a-e057-4ee0-b4a5-9813d026b7d1/1280.jpeg, https://megapx-assets.dcard.tw/images/44c11c39-ab6c-41ef-9e3b-04a9cbae56cc/1280.jpeg, https://megapx-assets.dcard.tw/images/2c6e7a4a-e057-4ee0-b4a5-9813d026b7d1/640.jpeg, https://megapx.dcard.tw/v1/images/2c6e7a4a-e057-4ee0-b4a5-9813d026b7d1, https://megapx.dcard.tw/v1/images/44c11c39-ab6c-41ef-9e3b-04a9cbae56cc, https://megapx-assets.dcard.tw/images/2c6e7a4a-e057-4ee0-b4a5-9813d026b7d1/640.jpeg, https://megapx-assets.dcard.tw/images/2c6e7a4a-e057-4ee0-b4a5-9813d026b7d1/640.jpeg, https://megapx-assets.dcard.tw/images/44c11c39-ab6c-41ef-9e3b-04a9cbae56cc/640.jpeg, image/thumbnail, image/megapx, image/megapx, 2020-02-16T01:22:27.607Z, 2020-02-16T01:22:27.607Z, 2020-02-16T01:22:27.607Z, 2020-02-16T01:22:27.607Z, 2020-02-16T01:22:27.607Z, 2020-02-16T01:22:27.607Z, 296, 828, 828, 640, 1792, 1792 ## 5 NULL ## 6 NULL ## reactions ## 1 286f599c-f86a-4932-82f0-f5a06f1eca03, 4b018f48-e184-445f-adf1-fc8e04ba09b9, aa0d425f-d530-4478-9a77-fe3aedc79eea, e8e6bc5d-41b0-4129-b134-97507523d7ff, 514c2569-fd53-4d9d-a415-bf0f88e7329f, 011ead16-9b83-4729-9fde-c588920c6c2d, 9285, 130, 124, 33, 13, 3 ## 2 286f599c-f86a-4932-82f0-f5a06f1eca03, e8e6bc5d-41b0-4129-b134-97507523d7ff, 4b018f48-e184-445f-adf1-fc8e04ba09b9, 514c2569-fd53-4d9d-a415-bf0f88e7329f, 011ead16-9b83-4729-9fde-c588920c6c2d, 6015, 550, 15, 7, 1 ## 3 286f599c-f86a-4932-82f0-f5a06f1eca03, e8e6bc5d-41b0-4129-b134-97507523d7ff, 514c2569-fd53-4d9d-a415-bf0f88e7329f, aa0d425f-d530-4478-9a77-fe3aedc79eea, 3009, 202, 4, 1 ## 4 286f599c-f86a-4932-82f0-f5a06f1eca03, e8e6bc5d-41b0-4129-b134-97507523d7ff, aa0d425f-d530-4478-9a77-fe3aedc79eea, 4b018f48-e184-445f-adf1-fc8e04ba09b9, 514c2569-fd53-4d9d-a415-bf0f88e7329f, 2206, 21, 10, 5, 1 ## 5 286f599c-f86a-4932-82f0-f5a06f1eca03, 514c2569-fd53-4d9d-a415-bf0f88e7329f, 4b018f48-e184-445f-adf1-fc8e04ba09b9, e8e6bc5d-41b0-4129-b134-97507523d7ff, 1692, 46, 1, 1 ## 6 286f599c-f86a-4932-82f0-f5a06f1eca03, e8e6bc5d-41b0-4129-b134-97507523d7ff, 4b018f48-e184-445f-adf1-fc8e04ba09b9, 514c2569-fd53-4d9d-a415-bf0f88e7329f, 011ead16-9b83-4729-9fde-c588920c6c2d, 1306, 117, 36, 5, 1 ## hidden customStyle isSuspiciousAccount layout withImages withVideos ## 1 FALSE NA FALSE classic FALSE FALSE ## 2 FALSE NA FALSE classic TRUE FALSE ## 3 FALSE NA FALSE classic FALSE FALSE ## 4 FALSE NA FALSE classic TRUE FALSE ## 5 FALSE NA FALSE classic FALSE FALSE ## 6 FALSE NA FALSE classic FALSE FALSE ## media ## 1 NULL ## 2 https://i.imgur.com/zdWZE8K.jpg, https://i.imgur.com/6RMIJ9E.jpg, https://i.imgur.com/W55VLqA.jpg, https://i.imgur.com/Our9jjE.jpg, https://i.imgur.com/OmZk3Bs.png ## 3 NULL ## 4 https://megapx-assets.dcard.tw/images/2c6e7a4a-e057-4ee0-b4a5-9813d026b7d1/1280.jpeg, https://megapx-assets.dcard.tw/images/44c11c39-ab6c-41ef-9e3b-04a9cbae56cc/1280.jpeg ## 5 NULL ## 6 NULL ## reportReasonText postAvatar school department ## 1 &lt;NA&gt; &lt;NA&gt; ## 2 &lt;NA&gt; &lt;NA&gt; ## 3 國立高雄大學 &lt;NA&gt; ## 4 \\U0001f317 brybry20 ## 5 &lt;NA&gt; &lt;NA&gt; ## 6 &lt;NA&gt; &lt;NA&gt; # View(res) 2.2.2 範例二：讀取台北市竊盜案件發生地區與時間 方法一：直接讀取線上資料。這個方法會直接讀取一個URL(例如程式碼中url所指到的網址)，該URL指向台北市開放資料集所釋出的台北市竊盜案件發生時間與地點的開放資料。 可以用head(df)的程式碼來觀察看看他前六行的資料有哪些。 方法二：讀取已下載的資料檔案。有時候所拿到的資料是已經下載好的靜態資料檔案，可以用程式直接開啟本機端（Local）的檔案。第一行程式碼是把url所指向的檔案給抓回來並儲存到本機端的data資料夾中，並命名為tptheft.csv。第二行程式碼則是直接讀取該資料夾中的該檔案。 我在這邊用一個dplyr這個套件中的glimpse()函式來看看該筆資料的結構。可以看得出來有哪些變數，每個變數的前幾個範例值，以及變數的型態。 2.2.3 範例三：用API載入內政部資料 url &lt;- &quot;https://www.ris.gov.tw/rs-opendata/api/v1/datastore/ODRP024/107?page=1&quot; tryCatch({ first_page &lt;- fromJSON(content(GET(url), &quot;text&quot;)) head(first_page$responseData) }, error = function(msg){ message(&quot;Original error message:&quot;) message(paste0(msg,&quot;\\n&quot;)) return(NA) } ) ## Original error message: ## Error in is.response(x): Timeout was reached: [www.ris.gov.tw] Operation timed out after 10004 milliseconds with 0 out of 0 bytes received ## [1] NA 2.2.4 範例四：獲取104資料 2.2.5 範例五：獲取ubike資料 https://taipeicity.github.io/traffic_realtime/ url &lt;- &quot;https://tcgbusfs.blob.core.windows.net/blobyoubike/YouBikeTP.json&quot; ubike.list &lt;- fromJSON(content(GET(url),&quot;text&quot;, encoding = &quot;utf-8&quot;)) ubike.v &lt;- unlist(ubike.list$retVal) ubike.m &lt;- matrix(ubike.v, byrow = T, ncol = 14) ubike.df &lt;- as.data.frame(ubike.m) names(ubike.df) &lt;- names(ubike.list$retVal$`0001`) head(ubike.df) ## sno sna tot sbi sarea mday lat ## 1 0001 捷運市政府站(3號出口) 180 132 信義區 20200217192734 25.0408578889 ## 2 0002 捷運國父紀念館站(2號出口) 48 1 大安區 20200217192744 25.041254 ## 3 0003 台北市政府 40 25 信義區 20200217192715 25.0377972222 ## 4 0004 市民廣場 60 20 信義區 20200217192729 25.0360361111 ## 5 0005 興雅國中 60 44 信義區 20200217192728 25.0365638889 ## 6 0006 臺北南山廣場 80 8 信義區 20200217192727 25.034047 ## lng ar ## 1 121.567904444 忠孝東路/松仁路(東南側) ## 2 121.55742 忠孝東路四段/光復南路口(西南側) ## 3 121.565169444 台北市政府東門(松智路) (鄰近信義商圈/台北探索館) ## 4 121.562325 市府路/松壽路(西北側)(鄰近台北101/台北世界貿易中心/台北探索館) ## 5 121.5686639 松仁路/松仁路95巷(東南側)(鄰近信義商圈/台北信義威秀影城) ## 6 121.565973 松智路/松廉路(東北側) (鄰近台北101/信義商圈/台北信義威秀影城) ## sareaen snaen ## 1 Xinyi Dist. MRT Taipei City Hall Stataion(Exit 3)-2 ## 2 Daan Dist. MRT S.Y.S Memorial Hall Stataion(Exit 2.) ## 3 Xinyi Dist. Taipei City Hall ## 4 Xinyi Dist. Citizen Square ## 5 Xinyi Dist. Xingya Jr. High School ## 6 Xinyi Dist. NAN SHAN PLAZA ## aren bemp act ## 1 The S.W. side of Road Zhongxiao East Road &amp; Road Chung Yan. 46 1 ## 2 Sec,4. Zhongxiao E.Rd/GuangFu S. Rd 47 1 ## 3 Taipei City Government Eastgate (Song Zhi Road) 15 1 ## 4 The N.W. side of Road Shifu &amp; Road Song Shou. 37 1 ## 5 The S.E. side of Road Songren &amp; Ln. 95, Songren Rd.. 16 1 ## 6 The N.E. side of Road Song Zhi &amp; Road Song Lian. 71 1 2.3 儲存現有變數 R可以暫時把現在有的變數儲存成暫存檔。可以用save()或load()，或者用saveRDS()與readRDS()。也可以用readr套件的write_rds()與read_rds()。 用以下的指令可以一次把所有環境中的變項全部儲存成一個檔案。ls()可以列出目前執行環境下所有的變項，在save()時必須要用file=參數來指定所要儲存成的目標檔案。檔案名稱由於是一個字串，所以必須要用雙引號。 save(list=ls(), file = &quot;output/hateGirl.rda&quot;) 2.4 查詢函式的定義 使用R的時候會經常遇到沒看過的函式，或者根本忘記某個函式要怎麼用。像我這種記憶力不好的，兩個月沒寫R，稍微特殊一點的函式名稱我就忘記了。忘記用法還好，還經常整個函式的名稱都忘記了。這時候你就可以用help()的指令查詢函式的用法和套件的內容。例如以下是查詢summary()這個函式的用法，你也可以用縮寫的方式來寫，就函式名稱前面打個問號就好。 help(summary) ?summary "],
["vector.html", "Chapter 3 Vector Notes 3.1 Vector的基本操作 3.2 Vector的運算 3.3 資料型態：Data types", " Chapter 3 Vector Notes 在這一章節與下一章節data.frame，你會學到vector、factor、matrix、list與data.frame這些「資料型態」 * vector就它當是google或Excel試算表的一欄，就是一個變項或稱變數（variable）。 * data.frame要特別費心去看，因為通常我們看到的一個google sheet或一個EXCEL sheet就相當一個data.frame，其相當於是「list of vector」的組成。 * factor和matrix就先自己看看，還沒碰到統計或者大量的數值資料時，暫時不會用到這兩種變數型態。matrix比較常在網絡資料或者文字資料等需要操作大型矩陣的時候會用。 有些資料型態非常雷同（例如matrix或data.frame都是將資料儲存為欄列型態的二維資料），但學習過程你要特別注意，不同的資料型態之間有什麼差異？ * matrix和data.frame有什麼差？ * factor和vector有什麼差？ * data.frame和list有什麼差？ 每一個資料型態有什麼操作 * 建立（creating）：怎麼新建一個這個資料型態？ * 選取（selecting columns）：我可不可以只要這幾項？ * 合併（merging or concatenating）：兩個這種資料型態可不可以疊在一起？ * 刪除（deleting, truncating）：怎麼把某一個或某幾個刪掉（要先選）？ * 轉換（type converting）：可不可以轉成另一種型態？ 在這邊我們使用各縣市平均每月薪資所得以及各縣市人口數兩筆範例資料來做練習。 3.1 Vector的基本操作 3.1.1 建立Vector 在程式碼中，只要是文字必用成對的雙引號或單引號包含其中，以區隔「變數」和「數字」。例如如果看到沒有雙引號的「英文字母」必定是變數名稱，或函式名稱。如果看到有雙引號的數字，那也是文字。 income &lt;- c(70100, 51300, 51100, 48400, 47600, 43000) county &lt;- c(&quot;台北&quot;, &quot;新北&quot;, &quot;桃園&quot;, &quot;高雄&quot;, &quot;台中&quot;, &quot;台南&quot;) population &lt;- c(2.6, 3.9, 2.2, 2.7, 2.8, 1.8) area &lt;- c(271.8, 2052.5, 1221, 2951.9, 2214.9, 2191.7) 用seq()建立一個連續而規律的vector。例如seq(11, 99, 11)的意思是，從11到99，每隔11取一個。 用a:b建立一個從a到b的連續整數。例如1:10會產生從1到10的十個數字。 a &lt;- seq(11, 99, 11) a ## [1] 11 22 33 44 55 66 77 88 99 b &lt;- 11:20 b ## [1] 11 12 13 14 15 16 17 18 19 20 產生一群符合某種分配的數列。例如runif()是指uniform分配，rnorm()是指常態分配；rnorm(1000, 1, 10)指的是產生1000個從1~10之間的數。 x &lt;- runif(1000, 1, 10) # uniform dist, n=1000 plot(density(x)) x &lt;- rnorm(1000, 1, 10) # uniform dist, n=1000 plot(density(x)) x &lt;- rnorm(10000000, 1, 10) # normal dist, n=1000 plot(density(x)) 3.1.2 查看vector的內容 預覽、印出vector的內容。在R裡面不用特別用print()來印出一個變數的內容。他像是matlab一樣，只要直接打出該變數的名稱，就代表要把其內容列印出來。 county ## [1] &quot;台北&quot; &quot;新北&quot; &quot;桃園&quot; &quot;高雄&quot; &quot;台中&quot; &quot;台南&quot; income ## [1] 70100 51300 51100 48400 47600 43000 head(county) ## [1] &quot;台北&quot; &quot;新北&quot; &quot;桃園&quot; &quot;高雄&quot; &quot;台中&quot; &quot;台南&quot; tail(county) ## [1] &quot;台北&quot; &quot;新北&quot; &quot;桃園&quot; &quot;高雄&quot; &quot;台中&quot; &quot;台南&quot; length(county) ## [1] 6 用View()檢視資料。你可以用View(county)將county的內容呈現在RStudio的預覽視窗上，是RStudio的使用者很常用的作法。 3.1.3 取出vector部分內容: Slicing 在操作資料時，我們經常會要取出前幾筆資料或者後幾筆資料出來觀察，或者去頭去尾僅留下中間值來觀察。我們可以把這動作稱為slicing。如果要第一個到第三個，那就只要直接用c(1, 2, 3)或1:3直接指定要哪幾個就好。但如果要的是倒數三個，那就要知道，這個vector到底有多長，才知道倒數是從哪一個到哪一個。可以用length(YOUR_VECTOR))來計算這個vector到底有多長。 county ## [1] &quot;台北&quot; &quot;新北&quot; &quot;桃園&quot; &quot;高雄&quot; &quot;台中&quot; &quot;台南&quot; county[c(5, 3, 1)] # how about country[c(1, 3, 5)] ## [1] &quot;台中&quot; &quot;桃園&quot; &quot;台北&quot; county[3:6] # is it equal to country[c(3, 4, 5, 6)] ## [1] &quot;桃園&quot; &quot;高雄&quot; &quot;台中&quot; &quot;台南&quot; a &lt;- 11:19 a[3:length(a)] ## [1] 13 14 15 16 17 18 19 a[length(a):3] ## [1] 19 18 17 16 15 14 13 3.1.4 刪除vector中的元素：Deleting 和前面取出某些單元的方式類似，只要明示要取哪幾個，然後加上一個負號在前面（比方說-c(1, 2, 3)），就可以把這幾個刪除。但要注意的是，若要把原本的vector拿去幾個元素，必須要assign回原本的vector將其覆蓋掉，不然不會發生改變。以下這些程式碼都不會更動到原本的vector b 。 b &lt;- 11:20 b[-(3:5)] ## [1] 11 12 16 17 18 19 20 b[-c(1, 3, 5)] ## [1] 12 14 16 17 18 19 20 b ## [1] 11 12 13 14 15 16 17 18 19 20 有更動原本vector b的做法：若要更動原本vector b的內容，必須要assign以覆蓋原本的b。 b &lt;- b[-(3:5)] b ## [1] 11 12 16 17 18 19 20 a &lt;- seq(11, 99, 11) a &lt;- a[-c(1, 3, 5)] a ## [1] 22 44 66 77 88 99 3.1.5 添加合併vectors：concatinating, binding, merging, appending 如果我有兩個vectors分別為a和b想把它合併，那就在外面加個c()把它合併就好，例如c(a, b)。c()不是一個變數c，他是一個vector的建構函式，可以初始化一個vector。通常這種合併資料經常出現在資料操作中，例如我有一個vector叫做population，我想要某幾個段落的資料，我就可以寫成population[c(1:21, 23:28, 45:57)]。我一共合併了三段資料，其中1:21和23:28和45:57是三個vectors，我用函數c()合併了他們。 a &lt;- 1:10 a &lt;- c(a, 11) a ## [1] 1 2 3 4 5 6 7 8 9 10 11 b ## [1] 11 12 16 17 18 19 20 a &lt;- c(a, b) a ## [1] 1 2 3 4 5 6 7 8 9 10 11 11 12 16 17 18 19 20 a &lt;- c(a, a, b) a ## [1] 1 2 3 4 5 6 7 8 9 10 11 11 12 16 17 18 19 20 1 2 3 4 5 6 7 ## [26] 8 9 10 11 11 12 16 17 18 19 20 11 12 16 17 18 19 20 3.2 Vector的運算 3.2.1 數值運算：Arithmetic operations a &lt;- 11:19 a + 3 ## [1] 14 15 16 17 18 19 20 21 22 a / 2 ## [1] 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 a %% 2 ## [1] 1 0 1 0 1 0 1 0 1 a %/% 2 ## [1] 5 6 6 7 7 8 8 9 9 a %% 2== 0 ## [1] FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE a %% 2 != 0 ## [1] TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE a[a%% 2 == 0] ## [1] 12 14 16 18 a[a%%2 != 0] ## [1] 11 13 15 17 19 a &lt;- a %% 2 # modular arithmetic, get the reminder a &lt;- a %/% 2 # Quotient 3.2.2 邏輯運算：Logic comparisons a %% 2 == 0 # deteting odd/even number ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE a %% 2 != 0 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE a[a%%2==0] ## [1] 0 0 0 0 0 0 0 0 0 a &gt; b ## Warning in a &gt; b: longer object length is not a multiple of shorter object ## length ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE income &gt; mean(income) ## [1] TRUE FALSE FALSE FALSE FALSE FALSE TRUE == T # == equal to, ## [1] TRUE TRUE != F # != Not equal to ## [1] TRUE any(a&gt;11) # is there any element larger than 1 ## [1] FALSE all(a&gt;11) # are all elements larger than 1 ## [1] FALSE 3.2.3 用邏輯運算來篩選資料：Subsetting by logic comparisons 有兩種方法可以篩選資料，其中一種是告訴vector說，符合條件的是哪幾個，另一種方法是給一個和該vector等長的TRUE/FALSEvector，只要是TRUE的便留下來，如果是FALSE就捨去。 第一種方法：which()會把vector a中符合條件的那幾個的index給傳回來。 a &lt;- seq(11, 55, 11) a[which(a%%2==1)] ## [1] 11 33 55 which(a%%2==1) ## [1] 1 3 5 第二種方法：透過邏輯比較後，會產生一個跟vector a相同長度的TRUE/FALSE vector。 a[c(T, F, T, F, T)] ## [1] 11 33 55 a[a%%2==1] ## [1] 11 33 55 a%%2 ## [1] 1 0 1 0 1 a%%2==1 ## [1] TRUE FALSE TRUE FALSE TRUE a &lt;- c(&quot;你好&quot;,&quot;你好棒棒&quot;,&quot;你好棒&quot;,&quot;你真的好棒&quot;) a[nchar(a)&gt;3] ## [1] &quot;你好棒棒&quot; &quot;你真的好棒&quot; 3.2.4 排序：Sorting and ordering sort(x)的結果必須用&lt;-覆蓋原本的x，此時的x才算被排序的結果。 order(x)函式會傳回x數值由小到大的索引。這個例子的結果是5, 4, 3, 6, 1, 2，也就是5位置的那個數最小、4那個位置的數次小、接下來3, 6, 1, 2。 x[order(x)]把order(x)結果（也就是c(5, 4, 3, 6, 1, 2)）傳給原本的x便會使得原本的x重新排序。通常order()的用途是，我們可以將兩個等長的variables例如var1和var2，依據var2來重新排序var1，例如var1[order(var2)]。 x &lt;- c(33, 55, 22, 13, 4, 24) sort(x) ## [1] 4 13 22 24 33 55 x &lt;- sort(x) # assign to replace original x order(x) ## [1] 1 2 3 4 5 6 x[order(x)] ## [1] 4 13 22 24 33 55 3.2.5 內建的數學函式 a &lt;- 11:19 min(a); max(a); mean(a); median(a); sd(a) ## [1] 11 ## [1] 19 ## [1] 15 ## [1] 15 ## [1] 2.738613 log2(a) ## [1] 3.459432 3.584963 3.700440 3.807355 3.906891 4.000000 4.087463 4.169925 ## [9] 4.247928 log1p(a) ## [1] 2.484907 2.564949 2.639057 2.708050 2.772589 2.833213 2.890372 2.944439 ## [9] 2.995732 ?log1p 3.3 資料型態：Data types 3.3.1 檢查資料型態：Checking data type mode(county) # character ## [1] &quot;character&quot; mode(income) # numeric ## [1] &quot;numeric&quot; mode(income &gt; mean(income)) # logical ## [1] &quot;logical&quot; testing &lt;- c(&quot;26.142&quot;, &quot;12.008&quot;, &quot;7.032&quot;, &quot;13.646&quot;, &quot;4.589&quot;) mode(testing) # character ## [1] &quot;character&quot; 3.3.2 轉換資料型態：Converting data type numeric vector可以用as.character(x)轉成charcter；logical vector可以用as.numeric(x)轉為numeric。概念上可以說是character &gt; numeric &gt; logical。 如果硬是在logical vector後附加一個numeric element的話，那就會整個vector被轉為numeric vector；相仿地，如果numeric vector後附加一個character element的話那整個vector就會被轉為character vector。 可以用sum()函式來計算logical vector有幾個TRUE值。例如sum(a%%2==1)就是計算a中有幾個奇數。TRUE可視為1、FALSE可視為0，所以加總起來就是TRUE有幾個。 income.c &lt;- as.character(income) population.c &lt;- as.numeric(population) a &lt;- seq(11, 99, 11) a &lt;- c(a, &quot;100&quot;) a &lt;- seq(11, 99, 11) sum(a%%2==1) ## [1] 5 "],
["dataframe.html", "Chapter 4 Dataframe Notes 4.1 建立data.frame 4.2 觀察data.frame 4.3 操作data frame 4.4 MORE 4.5 Character operations", " Chapter 4 Dataframe Notes 一開始用Excel去想像抽象的語言。一欄（一直行、Column、一個變數）就是一個vector，所以可想像一個vector裡面應該資料型態要是一致的。常用基本資料型態包含numeric（數值型態）、character（文字型態）。單一一個Excel試算表就像一個list或data.frame。把好幾欄湊在一起，不同欄包含的資料形態就可能不同（有些欄是人名，有些欄是數字），湊在一起變成一個list，而data.frame就是一種特殊list的型態。 4.1 建立data.frame 4.1.1 範例一：手動輸入台北市行政區人口與面積 將資料Assign給變數。複製網頁上的資料，並把每個變項（例如區名、人口數、行政區面積）建立成vector，再分別Assign給變數。每個變項的vector必須等長（不是嗎？有幾個行政區，就要有幾個區的人口數，就要有幾個區的面積）。 population &lt;- c(158228, 126687, 228075, 204903, 308383, 187920) town &lt;- c(&quot;中正&quot;, &quot;大同&quot;, &quot;中山&quot;, &quot;松山&quot;, &quot;大安&quot;, &quot;萬華&quot;) area &lt;- c(7.6071, 5.6815, 13.6821, 9.2878, 11.3614, 8.8522) 將vectors整合成data.frame。使用data.frame()可以將數個等長的vetors整合成一個data.frame。就像一個EXCEL資料表。 df &lt;- data.frame(town, population, area) df ## town population area ## 1 中正 158228 7.6071 ## 2 大同 126687 5.6815 ## 3 中山 228075 13.6821 ## 4 松山 204903 9.2878 ## 5 大安 308383 11.3614 ## 6 萬華 187920 8.8522 # View(df) 4.1.2 範例二：手動輸入台灣的進出口對象與數量 這個案例是到台灣出口進口貿易資料查詢的網頁上，逐筆複製資料貼上。先建立三個vecvtors，再將vectors合併為data.frame。 country &lt;- c(&quot;CN&quot;, &quot;US&quot;, &quot;JP&quot;, &quot;HK&quot;, &quot;KR&quot;, &quot;SG&quot;, &quot;DE&quot;, &quot;MY&quot;, &quot;VN&quot;, &quot;PH&quot;, &quot;TH&quot;, &quot;AU&quot;, &quot;NL&quot;, &quot;SA&quot;, &quot;ID&quot;, &quot;GB&quot;, &quot;IN&quot;, &quot;FR&quot;, &quot;IT&quot;, &quot;AE&quot;) import &lt;- c(26.142, 12.008, 7.032, 13.646, 4.589, 5.768, 2.131, 2.802, 3.428, 3.019, 1.976, 1.118, 1.624, 0.449, 0.983, 1.302, 1.027, 0.553, 0.670, 0.455) export &lt;- c(22.987, 12.204, 11.837, 7.739, 5.381, 4.610, 2.866, 2.784, 2.414, 2.092, 1.839, 1.788, 1.665, 1.409, 1.391, 1.075, 0.974, 0.899, 0.800, 0.728) df &lt;- data.frame(country, import, export) str(df) ## &#39;data.frame&#39;: 20 obs. of 3 variables: ## $ country: Factor w/ 20 levels &quot;AE&quot;,&quot;AU&quot;,&quot;CN&quot;,..: 3 19 11 7 12 17 4 13 20 15 ... ## $ import : num 26.14 12.01 7.03 13.65 4.59 ... ## $ export : num 22.99 12.2 11.84 7.74 5.38 ... stringAsFacgtors參數設定: 這時若以str(df)觀察該df的結構會發現，文字型態的資料被轉為Factors，這是我們所不樂見的。過去統計通常會把文字型態當成類別變數，於是用Factors作為資料型態，但資料科學中經常要處理大量的文字資料。此時可以加入一個參數stringsAsFactors設為FALSE，意味著預設不要將文字的資料轉為Factor而是直接以文字變項來處理。 設定全域參數: 為了避免每次都要打這串參數，可以把它設定為全域參數，可以在程式一開始時便加上options(stringsAsFactors = FASLE)，意味著底下所有的函式如果有stringsAsFactors這個參數，一律自動設為FALSE。 df &lt;- data.frame(country, import, export, stringsAsFactors = FALSE) str(df) ## &#39;data.frame&#39;: 20 obs. of 3 variables: ## $ country: chr &quot;CN&quot; &quot;US&quot; &quot;JP&quot; &quot;HK&quot; ... ## $ import : num 26.14 12.01 7.03 13.65 4.59 ... ## $ export : num 22.99 12.2 11.84 7.74 5.38 ... 4.1.3 More 甚至也可以用data.frame()建立一個新的、空的data.frame。在別的程式語言中，這可能被稱為建構子或initializing。 命名規則：df.test就R的用法就是一個變數，並不是df和test各自是一個變數。 df.test &lt;- data.frame() 4.2 觀察data.frame View(df) 用RStudio所提供的GUI直接觀看變數 head(df) 取前面六筆資料（也就是六列的資料來概觀該資料） class(df) 這個變數的物件型態 str(df) 這個data.frame的結構，包含有哪些變數、各別是什麼變數型態，並呈現前幾個範例值。 summary(df) 輸出每個變數的最大值、最小值、平均數、中位數等基本統計數值。 dplyr::glimpse(df) 為dplyr套件中的函式。和str(df)的功能幾乎相同，但排版排的好太多了。 # View(df) head(df) # get first part of the data.frame ## country import export ## 1 CN 26.142 22.987 ## 2 US 12.008 12.204 ## 3 JP 7.032 11.837 ## 4 HK 13.646 7.739 ## 5 KR 4.589 5.381 ## 6 SG 5.768 4.610 class(df) ## [1] &quot;data.frame&quot; str(df) ## &#39;data.frame&#39;: 20 obs. of 3 variables: ## $ country: chr &quot;CN&quot; &quot;US&quot; &quot;JP&quot; &quot;HK&quot; ... ## $ import : num 26.14 12.01 7.03 13.65 4.59 ... ## $ export : num 22.99 12.2 11.84 7.74 5.38 ... summary(df) ## country import export ## Length:20 Min. : 0.449 Min. : 0.728 ## Class :character 1st Qu.: 1.016 1st Qu.: 1.312 ## Mode :character Median : 2.054 Median : 1.966 ## Mean : 4.536 Mean : 4.374 ## 3rd Qu.: 4.884 3rd Qu.: 4.803 ## Max. :26.142 Max. :22.987 dplyr::glimpse(df) ## Observations: 20 ## Variables: 3 ## $ country &lt;chr&gt; &quot;CN&quot;, &quot;US&quot;, &quot;JP&quot;, &quot;HK&quot;, &quot;KR&quot;, &quot;SG&quot;, &quot;DE&quot;, &quot;MY&quot;, &quot;VN&quot;, &quot;PH&quot;, &quot;… ## $ import &lt;dbl&gt; 26.142, 12.008, 7.032, 13.646, 4.589, 5.768, 2.131, 2.802, 3.… ## $ export &lt;dbl&gt; 22.987, 12.204, 11.837, 7.739, 5.381, 4.610, 2.866, 2.784, 2.… 4.2.1 觀察資料維度 dim(df) ## [1] 20 3 ncol(df) ## [1] 3 nrow(df) ## [1] 20 length(df) ## [1] 3 4.3 操作data frame 4.3.1 取出data frame中的一個變數 每個data frame的一欄、一個變數相當於是一個vector，可以嘗試把其中一個變數取出來做資料型態觀察。 * names(df) 列出變數名稱 * df$發生.現.地點 顯示該變數內容 * df$發生時段 顯示該變數內容 * length(df$發生時段) 顯示該變數的長度（相當於有幾個） names(df) ## [1] &quot;country&quot; &quot;import&quot; &quot;export&quot; head(df$發生.現.地點) ## NULL head(df$發生時段) ## NULL length(df$發生時段) ## [1] 0 summary(df) ## country import export ## Length:20 Min. : 0.449 Min. : 0.728 ## Class :character 1st Qu.: 1.016 1st Qu.: 1.312 ## Mode :character Median : 2.054 Median : 1.966 ## Mean : 4.536 Mean : 4.374 ## 3rd Qu.: 4.884 3rd Qu.: 4.803 ## Max. :26.142 Max. :22.987 4.3.2 mutate 透過運算產生新變數 這裡容易犯錯的是，要記得跟程式講說你要加總或四則運算的是哪個df的variable。 從下面的這個操作中，該data.frame會產生一個新的變數sub，這就相當於Excel中的某一行減去某一行，然後把資料放在新的一行。 df$sub &lt;- df$import - df$export 4.3.3 filter, select 篩選資料、選取變數 注意，要告訴程式import和export是哪個data.frame的。 df[,]為存取df中某個區段的數值或某個數值的方法。因此df[1, 1]會取出第一行第一列，也就是第一筆資料的第一個vector。df[2, 3]則會取出第二筆資料的第三個variable。 下面的例子nrow(df)為1894，有1894筆資料，所以自然df\\(import與df\\)export的長度都是1894。因此，比較這兩個變數的大小會得到一個長度為1894的boolean (logical) variable。因此把這個長度為1894、充滿TRUE和FALSE的logical vector丟進df的row之處，因為取自df，大小判斷式結果的長度自然和原本的df的列數相同。因此當這個TRUE/FALSE被丟在df的列之處，便會篩選出import大於p.xport的數值。 原本的df有五個variable，而上述的操作是篩選資料，所以被篩選的是列，因此行的數量、名稱都不會變。因此，我篩選完後，直接存取這個被篩選過的data.frame的country variable，自然是可以的。 df ## country import export sub ## 1 CN 26.142 22.987 3.155 ## 2 US 12.008 12.204 -0.196 ## 3 JP 7.032 11.837 -4.805 ## 4 HK 13.646 7.739 5.907 ## 5 KR 4.589 5.381 -0.792 ## 6 SG 5.768 4.610 1.158 ## 7 DE 2.131 2.866 -0.735 ## 8 MY 2.802 2.784 0.018 ## 9 VN 3.428 2.414 1.014 ## 10 PH 3.019 2.092 0.927 ## 11 TH 1.976 1.839 0.137 ## 12 AU 1.118 1.788 -0.670 ## 13 NL 1.624 1.665 -0.041 ## 14 SA 0.449 1.409 -0.960 ## 15 ID 0.983 1.391 -0.408 ## 16 GB 1.302 1.075 0.227 ## 17 IN 1.027 0.974 0.053 ## 18 FR 0.553 0.899 -0.346 ## 19 IT 0.670 0.800 -0.130 ## 20 AE 0.455 0.728 -0.273 names(df) ## [1] &quot;country&quot; &quot;import&quot; &quot;export&quot; &quot;sub&quot; nrow(df) ## [1] 20 # filter row data by column value df[df$import &gt; df$export,] ## country import export sub ## 1 CN 26.142 22.987 3.155 ## 4 HK 13.646 7.739 5.907 ## 6 SG 5.768 4.610 1.158 ## 8 MY 2.802 2.784 0.018 ## 9 VN 3.428 2.414 1.014 ## 10 PH 3.019 2.092 0.927 ## 11 TH 1.976 1.839 0.137 ## 16 GB 1.302 1.075 0.227 ## 17 IN 1.027 0.974 0.053 df[df$import &gt; df$export,]$country ## [1] &quot;CN&quot; &quot;HK&quot; &quot;SG&quot; &quot;MY&quot; &quot;VN&quot; &quot;PH&quot; &quot;TH&quot; &quot;GB&quot; &quot;IN&quot; df[df$import &gt; df$export,1] ## [1] &quot;CN&quot; &quot;HK&quot; &quot;SG&quot; &quot;MY&quot; &quot;VN&quot; &quot;PH&quot; &quot;TH&quot; &quot;GB&quot; &quot;IN&quot; # 1 row == a data.frame with only one data entry class(df[df$import &gt; df$export,1]) ## [1] &quot;character&quot; class(df[,1]) # character vector ## [1] &quot;character&quot; class(df[1,]) # data.frame ## [1] &quot;data.frame&quot; class(unlist(df[1, -1])) # filter the 1st row and select all columns except 1 ## [1] &quot;numeric&quot; 4.3.4 sorting 排序：按照某個變數排序 df.sorted &lt;- df[order(df$import),]會使得整個df照import的大小排序重新做排列。因為order(df$import)會把資料照指定順序排列後的位置傳回來，所以把他丟給df的列的位置，便會使得df的資料照指定的順序排列。 預設是由小到大，加上decreasing = T這個參數後變成由大而小。 # sort rows by df$import column df.sorted &lt;- df[order(df$import),] # View(df.sorted) # sort rows in decreasing order df.sorted &lt;- df[order(df$import, decreasing = T),] # add - to column in order() can sort in decreasing order df.sorted &lt;- df[order(-df$import),] head(df.sorted) ## country import export sub ## 1 CN 26.142 22.987 3.155 ## 4 HK 13.646 7.739 5.907 ## 2 US 12.008 12.204 -0.196 ## 3 JP 7.032 11.837 -4.805 ## 6 SG 5.768 4.610 1.158 ## 5 KR 4.589 5.381 -0.792 4.4 MORE 4.4.1 Plotting graphics::plot()為會預載入R的繪圖套件，如果希望繪圖的同時加上回歸線和資料點標籤的話，必須要三行一起執行。 # plot(df) # raise error, 1st column is a character vector plot(df[, 2:3]) plot(df[1:10, 2:3]) text(import, export, labels=country, cex= 0.5, pos=3) lines(1:25, 1:25, col=&#39;red&#39;) ?plot 4.4.2 Using dplyr library(dplyr) ## Warning: package &#39;dplyr&#39; was built under R version 3.5.2 ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union df &lt;- data.frame(country, import, export, stringsAsFactors = F) df &lt;- mutate(df, sub = import - export) filter(df, import &gt; export) ## country import export sub ## 1 CN 26.142 22.987 3.155 ## 2 HK 13.646 7.739 5.907 ## 3 SG 5.768 4.610 1.158 ## 4 MY 2.802 2.784 0.018 ## 5 VN 3.428 2.414 1.014 ## 6 PH 3.019 2.092 0.927 ## 7 TH 1.976 1.839 0.137 ## 8 GB 1.302 1.075 0.227 ## 9 IN 1.027 0.974 0.053 select(df, c(1, 3)) ## country export ## 1 CN 22.987 ## 2 US 12.204 ## 3 JP 11.837 ## 4 HK 7.739 ## 5 KR 5.381 ## 6 SG 4.610 ## 7 DE 2.866 ## 8 MY 2.784 ## 9 VN 2.414 ## 10 PH 2.092 ## 11 TH 1.839 ## 12 AU 1.788 ## 13 NL 1.665 ## 14 SA 1.409 ## 15 ID 1.391 ## 16 GB 1.075 ## 17 IN 0.974 ## 18 FR 0.899 ## 19 IT 0.800 ## 20 AE 0.728 4.5 Character operations 4.5.1 Character operations a &lt;- seq(11, 55, 11) paste(&quot;A&quot;, a) # concatenate ## [1] &quot;A 11&quot; &quot;A 22&quot; &quot;A 33&quot; &quot;A 44&quot; &quot;A 55&quot; paste0(&quot;A&quot;, a) # concatenate ## [1] &quot;A11&quot; &quot;A22&quot; &quot;A33&quot; &quot;A44&quot; &quot;A55&quot; "],
["date-and-time.html", "Chapter 5 Date and Time 5.1 時間物件、數值表示、文字表示間的關係", " Chapter 5 Date and Time 5.1 時間物件、數值表示、文字表示間的關係 在程式語言中，時間通常有三種格式，但就google sheet或EXCEL這種使用者介面而言，他盡量不讓使用者知道有時間物件這個東西，省得徒增困擾，但會允許使用者在數值型態或文字顯示的型態間作切換。不過如果你要從事資料分析，操作時間是非常重要的一個技能，舉凡跟時間軸相關的視覺化或者要限定資料分析的時間區間都常常會用到。其次，值得注意的是，對程式語言的時間來說，date和datetime前者僅處理日期，後者處理日期+時間，兩者可視資料分析目的互相轉換。 時間物件：一種是該程式語言用來做時間運算的時間物件，Python有Python的時間物件、R有R的時間物件。透過第三方提供的時間計算套件與函式，非常便於計算出日期是第幾週、第幾天、禮拜幾。也可以兩個時間相減來產生時間差。 時間字串：另一種是該時間物件可以被展示為字串。用API可以存取的時間，或者說資料紀錄的時間欄位，多半是文字。不過文字狀態的時間沒辦法被運算（就文字而已，要怎麼做運算？），所以通常程式語言必須要將其轉換為該語言特有的時間物件。爬蟲所爬下來的幾乎都是文字型態，必須要自己根據文字的表示內容轉換為時間物件才可以做運算。 時間的整數表示：時間在電腦上被實作的方式實際上是整數或小數，而軟體工程師會把該整數用數學公式轉為時間（例如用自1900年1月1日0分0秒至今日的總秒數的整數來作為時間的儲存單位）。一般來說，系統在輸出資料時所自動吐出來的時間普遍是用整數來記錄，所以如果你處理的是瀏覽器所吐出來的時間，那大概是整數。以Google sheet來說，其基準點是1900年1月1日0分0秒，如果是Date，就是這個基準加上一串整數。如果是時間，就是這個基準加上一串帶小數點的整數，而儲存在電腦裡，就是上述的整數，或者是帶小數點的整數（Numeric） 在datatime資料在網路上交換時，通常用文字型態或數值型態。例如twitter API和facebook graph API所下載的資料時間型態都是文字，PTT等用爬蟲爬下來的更是文字。但部分由API或者資料庫查詢回來的結果可能是數值；Excel若把某個變數指定為時間的話，那下載下來該變數也會是數值型態，需要自己寫程式進行轉換。因此，處理時間資料的第一件事情就是要知道他的時間是什麼格式。再來，通常每個程式語言都會有自己的時間物件，並且定義好一系列的轉換函式，讓寫程式的人將文字型態或數值型態的時間轉換為該語言所獨有的時間物件，或將時間物件轉回文字或數值型態。我們在寫R時，會用第三方所開發的lubridate套件來處理時間。 時間的常用操作概略有以下幾項： 1. 字串轉時間物件 2. 數值轉時間物件 3. 取週、月、或年為分析單位 * Basic skills of reading files * Read excel * Read csv * "],
["-excel-.html", "Chapter 6 讀取Excel：以世界各國產假支薪政策為例 6.1 程式寫作：使用base套件", " Chapter 6 讀取Excel：以世界各國產假支薪政策為例 這份資料適合完全沒有碰過R的人學習，更適用於了解R的基本資料型態的人（如vector、data.frame等）。在這份教學中你將依序透過操作學到： 1. 如何讀入Excel檔（.xlsx, .xls）？ 2. 運用R base套件篩選資料列與欄。如何從data.frame選出所需要的變項欄？如何篩出所要的資料列？ 3. 如何進行基礎的NA值處理？is.na() 4. 如何繪製長條圖？如何繪製數個子圖？如何利用for-loop重複執行類似的程式碼？ 5. 利用barplot()來繪製長條圖。 在這個案例中尤其要注意的是如何運用R的base套件選取所需的變項欄與篩取合乎條件的資料列，這是基本功，也是拿到資料、成功讀檔、確認變項變數型態後的下一件事，以及進入資料彙整（Summarization）前所需要思考的前置步驟。因為NA值的處理通常依照案例需求有不同的作法，繪圖更是需要根據案例、視資料類型、視覺化工具等進行調整。所以，我自己通常R寫久了以後，不見得會記得要怎麼繪圖（我會對我用過的函式留下一點點印象，然後用ctrl-shift-f查詢看看是否我在哪一個檔案曾經用過該函式。 案例說明：產假支薪（Paid Maternal Leave）。本案例將利用R來重製華盛頓郵報在2016/08/13的一篇談論美國婦女產假支薪情形的報導。這個案例中將會應用到data.frame和基本的繪圖與資料摘要方法。Melissa Etehad &amp; Jeremy C.F. Lin (August 13, 2016) The world is getting better at paid maternity leave. The U.S. is not. The Washington Post 我希望仿照The Washington Post的報導，先以最後一年為基準分5, 4, 3, 2, 1（福利由高到沒有）數層來繪製。首先先繪製最後一年（matleave_13）為5的。然後再分左右兩半，左邊原為一開始有紀錄就是5的（包含最早matleave_95沒資料的如SRB和MNE），右邊原為一開始有紀錄就不是5的。但為了方便起見，我把問題簡化為「左半側為matleave_95為5的，右半側為matleave_95不是5的」如下圖，所以照我方法繪製出來的圖會有一點差異，MNE和SRB就被歸到右邊（灰色）第一年不是5的資料群。 而以下的範例程式，就以繪製出有紀錄的最後一年（matleave_13）為5，有資料的第一年（matleave_95）亦為5的區塊，也就是左半邊藍色的區塊。 6.1 程式寫作：使用base套件 6.1.1 步驟一：用readxl套件讀取Excel檔 # install.packages(&quot;readxl&quot;) library(readxl) ## Warning: package &#39;readxl&#39; was built under R version 3.5.2 options(stringsAsFactors = FALSE) rawdata &lt;- read_excel(&quot;data/WORLD-MACHE_Gender_6.8.15.xls&quot;, &quot;Sheet1&quot;, col_names=T) R的base套件中沒有內建讀取Excel檔的工具，所以需要安裝並載入讀取Excel檔的第三方套件readxl才有辦法讀取Excel檔。 為了避免讀取到文字型態chr的資料被程式自動轉為factor，使用options(stringsAsFactors = FALSE)自動將所有帶參數stringsAsFactors的參數值設為FALSE。 利用?read_excel查詢一下可以怎麼用該函式如下。help上提到，該函式的功能為讀取.xls與xlsx檔，正確來說，是將.xls檔和.xlsx檔讀取後轉存為R的資料型態如data.frame或list。 read_excel()函式有以下幾個參數可以設定： path指的是檔案路徑、 sheet指的是哪一個資料表，可以給資料表名稱（如上例）或者指定第幾個資料表； skip則可以忽略掉一些Excel開頭可能包含的幾列不需要的詮釋資料，其他可以詳閱查詢help的說明。 Example 6.1 read_excel(path, sheet = NULL, range = NULL, col_names = TRUE, col_types = NULL, na = \"\", trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, n_max)) 觀察資料：通常讀取好資料後，我會習慣性地用View()指令來觀察該data.frame。然後我會運用一些函式來協助我觀察一下該data.frame的特性。class()可以獲取資料型態、dim()可以獲知有幾列幾行（先列後行）、names()可以知道有哪些變項。但我最常用的是dplyr套件的glimpse()或str()，它告訴我這個其為一個data.frame，且有197個observation，也就是列，和156個變項。且str()會列出每個變數的變數名稱、變數型態（例如下方的iso2變數型態為chr（character，文字型態），而wb_econ的變數型態為num（numeric，數值型態），每個變數他會列出前幾筆資料。 class(rawdata) ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; dim(rawdata) ## [1] 197 156 names(rawdata) ## [1] &quot;country&quot; &quot;iso2&quot; &quot;iso3&quot; ## [4] &quot;region&quot; &quot;wb_econ&quot; &quot;matleave_95&quot; ## [7] &quot;matleave_96&quot; &quot;matleave_97&quot; &quot;matleave_98&quot; ## [10] &quot;matleave_99&quot; &quot;matleave_00&quot; &quot;matleave_01&quot; ## [13] &quot;matleave_02&quot; &quot;matleave_03&quot; &quot;matleave_04&quot; ## [16] &quot;matleave_05&quot; &quot;matleave_06&quot; &quot;matleave_07&quot; ## [19] &quot;matleave_08&quot; &quot;matleave_09&quot; &quot;matleave_10&quot; ## [22] &quot;matleave_11&quot; &quot;matleave_12&quot; &quot;matleave_13&quot; ## [25] &quot;matleave_wrr_95&quot; &quot;matleave_wrr_96&quot; &quot;matleave_wrr_97&quot; ## [28] &quot;matleave_wrr_98&quot; &quot;matleave_wrr_99&quot; &quot;matleave_wrr_00&quot; ## [31] &quot;matleave_wrr_01&quot; &quot;matleave_wrr_02&quot; &quot;matleave_wrr_03&quot; ## [34] &quot;matleave_wrr_04&quot; &quot;matleave_wrr_05&quot; &quot;matleave_wrr_06&quot; ## [37] &quot;matleave_wrr_07&quot; &quot;matleave_wrr_08&quot; &quot;matleave_wrr_09&quot; ## [40] &quot;matleave_wrr_10&quot; &quot;matleave_wrr_11&quot; &quot;matleave_wrr_12&quot; ## [43] &quot;matleave_wrr_13&quot; &quot;bf_dur_95&quot; &quot;bf_dur_96&quot; ## [46] &quot;bf_dur_97&quot; &quot;bf_dur_98&quot; &quot;bf_dur_99&quot; ## [49] &quot;bf_dur_00&quot; &quot;bf_dur_01&quot; &quot;bf_dur_02&quot; ## [52] &quot;bf_dur_03&quot; &quot;bf_dur_04&quot; &quot;bf_dur_05&quot; ## [55] &quot;bf_dur_06&quot; &quot;bf_dur_07&quot; &quot;bf_dur_08&quot; ## [58] &quot;bf_dur_09&quot; &quot;bf_dur_10&quot; &quot;bf_dur_11&quot; ## [61] &quot;bf_dur_12&quot; &quot;bf_dur_13&quot; &quot;mat_bfeed_6mon_95&quot; ## [64] &quot;mat_bfeed_6mon_96&quot; &quot;mat_bfeed_6mon_97&quot; &quot;mat_bfeed_6mon_98&quot; ## [67] &quot;mat_bfeed_6mon_99&quot; &quot;mat_bfeed_6mon_00&quot; &quot;mat_bfeed_6mon_01&quot; ## [70] &quot;mat_bfeed_6mon_02&quot; &quot;mat_bfeed_6mon_03&quot; &quot;mat_bfeed_6mon_04&quot; ## [73] &quot;mat_bfeed_6mon_05&quot; &quot;mat_bfeed_6mon_06&quot; &quot;mat_bfeed_6mon_07&quot; ## [76] &quot;mat_bfeed_6mon_08&quot; &quot;mat_bfeed_6mon_09&quot; &quot;mat_bfeed_6mon_10&quot; ## [79] &quot;mat_bfeed_6mon_11&quot; &quot;mat_bfeed_6mon_12&quot; &quot;mat_bfeed_6mon_13&quot; ## [82] &quot;minage_fem_leg_95&quot; &quot;minage_fem_leg_96&quot; &quot;minage_fem_leg_97&quot; ## [85] &quot;minage_fem_leg_98&quot; &quot;minage_fem_leg_99&quot; &quot;minage_fem_leg_00&quot; ## [88] &quot;minage_fem_leg_01&quot; &quot;minage_fem_leg_02&quot; &quot;minage_fem_leg_03&quot; ## [91] &quot;minage_fem_leg_04&quot; &quot;minage_fem_leg_05&quot; &quot;minage_fem_leg_06&quot; ## [94] &quot;minage_fem_leg_07&quot; &quot;minage_fem_leg_08&quot; &quot;minage_fem_leg_09&quot; ## [97] &quot;minage_fem_leg_10&quot; &quot;minage_fem_leg_11&quot; &quot;minage_fem_leg_12&quot; ## [100] &quot;legal_diff_leg_95&quot; &quot;legal_diff_leg_96&quot; &quot;legal_diff_leg_97&quot; ## [103] &quot;legal_diff_leg_98&quot; &quot;legal_diff_leg_99&quot; &quot;legal_diff_leg_00&quot; ## [106] &quot;legal_diff_leg_01&quot; &quot;legal_diff_leg_02&quot; &quot;legal_diff_leg_03&quot; ## [109] &quot;legal_diff_leg_04&quot; &quot;legal_diff_leg_05&quot; &quot;legal_diff_leg_06&quot; ## [112] &quot;legal_diff_leg_07&quot; &quot;legal_diff_leg_08&quot; &quot;legal_diff_leg_09&quot; ## [115] &quot;legal_diff_leg_10&quot; &quot;legal_diff_leg_11&quot; &quot;legal_diff_leg_12&quot; ## [118] &quot;minage_fem_pc_95&quot; &quot;minage_fem_pc_96&quot; &quot;minage_fem_pc_97&quot; ## [121] &quot;minage_fem_pc_98&quot; &quot;minage_fem_pc_99&quot; &quot;minage_fem_pc_00&quot; ## [124] &quot;minage_fem_pc_01&quot; &quot;minage_fem_pc_02&quot; &quot;minage_fem_pc_03&quot; ## [127] &quot;minage_fem_pc_04&quot; &quot;minage_fem_pc_05&quot; &quot;minage_fem_pc_06&quot; ## [130] &quot;minage_fem_pc_07&quot; &quot;minage_fem_pc_08&quot; &quot;minage_fem_pc_09&quot; ## [133] &quot;minage_fem_pc_10&quot; &quot;minage_fem_pc_11&quot; &quot;minage_fem_pc_12&quot; ## [136] &quot;legal_diff_pc_95&quot; &quot;legal_diff_pc_96&quot; &quot;legal_diff_pc_97&quot; ## [139] &quot;legal_diff_pc_98&quot; &quot;legal_diff_pc_99&quot; &quot;legal_diff_pc_00&quot; ## [142] &quot;legal_diff_pc_01&quot; &quot;legal_diff_pc_02&quot; &quot;legal_diff_pc_03&quot; ## [145] &quot;legal_diff_pc_04&quot; &quot;legal_diff_pc_05&quot; &quot;legal_diff_pc_06&quot; ## [148] &quot;legal_diff_pc_07&quot; &quot;legal_diff_pc_08&quot; &quot;legal_diff_pc_09&quot; ## [151] &quot;legal_diff_pc_10&quot; &quot;legal_diff_pc_11&quot; &quot;legal_diff_pc_12&quot; ## [154] &quot;minwage_ppp_2013&quot; &quot;mw_overtime&quot; &quot;oecd&quot; str(rawdata) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 197 obs. of 156 variables: ## $ country : chr &quot;Afghanistan&quot; &quot;Albania&quot; &quot;Algeria&quot; &quot;Andorra&quot; ... ## $ iso2 : chr &quot;AF&quot; &quot;AL&quot; &quot;DZ&quot; &quot;AD&quot; ... ## $ iso3 : chr &quot;AFG&quot; &quot;ALB&quot; &quot;DZA&quot; &quot;AND&quot; ... ## $ region : chr &quot;South Asia&quot; &quot;Europe &amp; Central Asia&quot; &quot;Middle East &amp; North Africa&quot; &quot;Europe &amp; Central Asia&quot; ... ## $ wb_econ : num 1 2 2 4 2 4 2 2 4 4 ... ## $ matleave_95 : num 2 5 3 2 2 2 2 3 1 5 ... ## $ matleave_96 : num 2 5 3 2 2 2 2 3 1 5 ... ## $ matleave_97 : num 2 5 3 2 2 2 2 3 1 5 ... ## $ matleave_98 : num 2 5 3 2 2 2 2 3 1 5 ... ## $ matleave_99 : num 2 5 3 2 2 2 2 3 1 5 ... ## $ matleave_00 : num 2 5 3 3 2 2 2 3 1 5 ... ## $ matleave_01 : num 2 5 3 3 2 2 2 3 1 5 ... ## $ matleave_02 : num 2 5 3 3 2 2 2 3 1 5 ... ## $ matleave_03 : num 2 5 3 3 2 2 2 3 1 5 ... ## $ matleave_04 : num 2 5 3 3 2 2 2 5 1 5 ... ## $ matleave_05 : num 2 5 3 3 2 2 2 5 1 5 ... ## $ matleave_06 : num 2 5 3 3 2 2 2 5 1 5 ... ## $ matleave_07 : num 2 5 3 3 2 2 2 5 1 5 ... ## $ matleave_08 : num 2 5 3 3 2 2 2 5 1 5 ... ## $ matleave_09 : num 2 5 3 3 2 2 2 5 1 5 ... ## $ matleave_10 : num 2 5 3 3 2 2 2 5 NA 5 ... ## $ matleave_11 : num 2 5 3 3 2 2 2 5 3 5 ... ## $ matleave_12 : num 2 5 3 3 2 2 2 5 3 5 ... ## $ matleave_13 : num 2 5 3 3 2 2 2 5 3 5 ... ## $ matleave_wrr_95 : num 5 4 5 5 5 3 5 5 1 5 ... ## $ matleave_wrr_96 : num 5 4 5 5 5 3 5 5 1 5 ... ## $ matleave_wrr_97 : num 5 4 5 5 5 3 5 5 1 5 ... ## $ matleave_wrr_98 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_99 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_00 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_01 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_02 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_03 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_04 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_05 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_06 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_07 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_08 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_09 : num 5 4 5 5 5 5 5 5 1 5 ... ## $ matleave_wrr_10 : num 5 4 5 5 5 5 5 5 NA 5 ... ## $ matleave_wrr_11 : num 5 4 5 5 5 5 5 5 2 5 ... ## $ matleave_wrr_12 : num 5 4 5 5 5 5 5 5 2 5 ... ## $ matleave_wrr_13 : num 5 4 5 5 5 5 5 5 2 5 ... ## $ bf_dur_95 : num 5 1 1 NA 5 1 5 5 1 5 ... ## $ bf_dur_96 : num 5 5 1 NA 5 1 5 5 1 5 ... ## $ bf_dur_97 : num 5 5 1 NA 5 1 5 5 1 5 ... ## $ bf_dur_98 : num 5 5 1 NA 5 1 5 5 1 5 ... ## $ bf_dur_99 : num 5 5 1 NA 5 1 5 5 1 5 ... ## $ bf_dur_00 : num 5 5 1 NA 5 1 5 5 1 5 ... ## $ bf_dur_01 : num 5 5 1 NA 5 1 5 5 1 5 ... ## $ bf_dur_02 : num 5 5 NA NA 5 1 5 5 1 5 ... ## $ bf_dur_03 : num 5 5 NA 5 5 1 5 5 1 5 ... ## $ bf_dur_04 : num 5 5 1 5 5 1 5 5 1 5 ... ## $ bf_dur_05 : num 5 5 1 5 5 1 5 5 1 5 ... ## $ bf_dur_06 : num 5 5 1 5 5 1 5 5 1 5 ... ## $ bf_dur_07 : num 5 5 1 5 5 1 5 5 1 5 ... ## $ bf_dur_08 : num 5 5 1 5 5 1 5 5 1 5 ... ## $ bf_dur_09 : num 5 5 1 5 5 1 5 5 1 5 ... ## $ bf_dur_10 : num 5 5 1 5 5 1 5 5 1 5 ... ## $ bf_dur_11 : num 5 5 1 5 5 1 5 5 1 5 ... ## $ bf_dur_12 : num 5 5 1 5 5 1 5 5 1 5 ... ## $ bf_dur_13 : num 5 5 1 5 5 1 5 5 1 5 ... ## $ mat_bfeed_6mon_95: num 3 3 1 NA 3 1 3 3 1 5 ... ## $ mat_bfeed_6mon_96: num 3 5 1 NA 3 1 3 3 1 5 ... ## $ mat_bfeed_6mon_97: num 3 5 1 NA 3 1 3 3 1 5 ... ## $ mat_bfeed_6mon_98: num 3 5 1 NA 3 1 3 3 1 5 ... ## $ mat_bfeed_6mon_99: num 3 5 1 NA 3 1 3 3 1 5 ... ## $ mat_bfeed_6mon_00: num 3 5 1 NA 3 1 3 3 1 5 ... ## $ mat_bfeed_6mon_01: num 3 5 1 NA 3 1 3 3 1 5 ... ## $ mat_bfeed_6mon_02: num 3 5 NA NA 3 1 3 3 1 5 ... ## $ mat_bfeed_6mon_03: num 3 5 NA 3 3 1 3 3 1 5 ... ## $ mat_bfeed_6mon_04: num 3 5 1 3 3 1 3 5 1 5 ... ## $ mat_bfeed_6mon_05: num 3 5 1 3 3 1 3 5 1 5 ... ## $ mat_bfeed_6mon_06: num 3 5 1 3 3 1 3 5 1 5 ... ## $ mat_bfeed_6mon_07: num 3 5 1 3 3 1 3 5 1 5 ... ## $ mat_bfeed_6mon_08: num 3 5 1 3 3 1 3 5 1 5 ... ## $ mat_bfeed_6mon_09: num 3 5 1 3 3 1 3 5 1 5 ... ## $ mat_bfeed_6mon_10: num 3 5 1 3 3 1 3 5 1 5 ... ## $ mat_bfeed_6mon_11: num 3 5 1 3 3 1 3 5 1 5 ... ## $ mat_bfeed_6mon_12: num 3 5 1 3 3 1 3 5 1 5 ... ## $ mat_bfeed_6mon_13: num 3 5 1 3 3 1 3 5 1 5 ... ## $ minage_fem_leg_95: num 4 4 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_96: num 4 4 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_97: num 4 4 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_98: num 4 4 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_99: num 4 4 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_00: num 4 4 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_01: num 4 4 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_02: num 4 4 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_03: num 4 5 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_04: num 4 5 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_05: num 4 5 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_06: num 4 5 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_07: num 4 5 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_08: num 4 5 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_09: num 4 5 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_10: num 4 5 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_11: num 4 5 5 NA 5 NA 5 4 NA NA ... ## $ minage_fem_leg_12: num 4 5 5 NA 5 NA 5 4 NA NA ... ## [list output truncated] glimpse(rawdata) ## Observations: 197 ## Variables: 156 ## $ country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;Andorra&quot;, &quot;An… ## $ iso2 &lt;chr&gt; &quot;AF&quot;, &quot;AL&quot;, &quot;DZ&quot;, &quot;AD&quot;, &quot;AO&quot;, &quot;AG&quot;, &quot;AR&quot;, &quot;AM&quot;, &quot;AU… ## $ iso3 &lt;chr&gt; &quot;AFG&quot;, &quot;ALB&quot;, &quot;DZA&quot;, &quot;AND&quot;, &quot;AGO&quot;, &quot;ATG&quot;, &quot;ARG&quot;, &quot;A… ## $ region &lt;chr&gt; &quot;South Asia&quot;, &quot;Europe &amp; Central Asia&quot;, &quot;Middle East… ## $ wb_econ &lt;dbl&gt; 1, 2, 2, 4, 2, 4, 2, 2, 4, 4, 2, 4, 4, 1, 4, 2, 4, … ## $ matleave_95 &lt;dbl&gt; 2, 5, 3, 2, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 3, … ## $ matleave_96 &lt;dbl&gt; 2, 5, 3, 2, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 3, … ## $ matleave_97 &lt;dbl&gt; 2, 5, 3, 2, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 3, … ## $ matleave_98 &lt;dbl&gt; 2, 5, 3, 2, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, … ## $ matleave_99 &lt;dbl&gt; 2, 5, 3, 2, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, … ## $ matleave_00 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, … ## $ matleave_01 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, … ## $ matleave_02 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, … ## $ matleave_03 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, … ## $ matleave_04 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 2, 2, 5, 4, … ## $ matleave_05 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 2, 2, 5, 4, … ## $ matleave_06 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 3, 2, 5, 4, … ## $ matleave_07 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 3, 2, 5, 4, … ## $ matleave_08 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 3, 2, 5, 4, … ## $ matleave_09 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 3, 2, 5, 4, … ## $ matleave_10 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, NA, 5, 5, 2, 2, 3, 2, 5, 4,… ## $ matleave_11 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 3, 5, 5, 2, 2, 3, 2, 5, 4, … ## $ matleave_12 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 3, 5, 5, 2, 2, 3, 2, 5, 4, … ## $ matleave_13 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 3, 5, 5, 2, 2, 3, 2, 5, 4, … ## $ matleave_wrr_95 &lt;dbl&gt; 5, 4, 5, 5, 5, 3, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_96 &lt;dbl&gt; 5, 4, 5, 5, 5, 3, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_97 &lt;dbl&gt; 5, 4, 5, 5, 5, 3, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_98 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_99 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_00 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_01 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_02 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_03 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_04 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_05 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_06 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_07 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_08 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_09 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_10 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, NA, 5, 5, 5, 5, 5, 5, 5, 4,… ## $ matleave_wrr_11 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_12 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ matleave_wrr_13 &lt;dbl&gt; 5, 4, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 4, … ## $ bf_dur_95 &lt;dbl&gt; 5, 1, 1, NA, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 1,… ## $ bf_dur_96 &lt;dbl&gt; 5, 5, 1, NA, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 1,… ## $ bf_dur_97 &lt;dbl&gt; 5, 5, 1, NA, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 1,… ## $ bf_dur_98 &lt;dbl&gt; 5, 5, 1, NA, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 1,… ## $ bf_dur_99 &lt;dbl&gt; 5, 5, 1, NA, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 1,… ## $ bf_dur_00 &lt;dbl&gt; 5, 5, 1, NA, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 1,… ## $ bf_dur_01 &lt;dbl&gt; 5, 5, 1, NA, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 1,… ## $ bf_dur_02 &lt;dbl&gt; 5, 5, NA, NA, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5… ## $ bf_dur_03 &lt;dbl&gt; 5, 5, NA, 5, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5,… ## $ bf_dur_04 &lt;dbl&gt; 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5, … ## $ bf_dur_05 &lt;dbl&gt; 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5, … ## $ bf_dur_06 &lt;dbl&gt; 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5, … ## $ bf_dur_07 &lt;dbl&gt; 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5, … ## $ bf_dur_08 &lt;dbl&gt; 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5, … ## $ bf_dur_09 &lt;dbl&gt; 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5, … ## $ bf_dur_10 &lt;dbl&gt; 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5, … ## $ bf_dur_11 &lt;dbl&gt; 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5, … ## $ bf_dur_12 &lt;dbl&gt; 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 1, 1, 5, 5, … ## $ bf_dur_13 &lt;dbl&gt; 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 1, 1, 5, 5, … ## $ mat_bfeed_6mon_95 &lt;dbl&gt; 3, 3, 1, NA, 3, 1, 3, 3, 1, 5, 5, 1, 1, 1, 1, 5, 1,… ## $ mat_bfeed_6mon_96 &lt;dbl&gt; 3, 5, 1, NA, 3, 1, 3, 3, 1, 5, 5, 1, 1, 1, 1, 5, 1,… ## $ mat_bfeed_6mon_97 &lt;dbl&gt; 3, 5, 1, NA, 3, 1, 3, 3, 1, 5, 5, 1, 1, 1, 1, 5, 1,… ## $ mat_bfeed_6mon_98 &lt;dbl&gt; 3, 5, 1, NA, 3, 1, 3, 3, 1, 5, 5, 1, 1, 1, 1, 5, 3,… ## $ mat_bfeed_6mon_99 &lt;dbl&gt; 3, 5, 1, NA, 3, 1, 3, 3, 1, 5, 5, 1, 1, 1, 1, 5, 3,… ## $ mat_bfeed_6mon_00 &lt;dbl&gt; 3, 5, 1, NA, 3, 1, 3, 3, 1, 5, 5, 1, 1, 1, 1, 5, 3,… ## $ mat_bfeed_6mon_01 &lt;dbl&gt; 3, 5, 1, NA, 3, 1, 3, 3, 1, 5, 5, 1, 1, 1, 1, 5, 3,… ## $ mat_bfeed_6mon_02 &lt;dbl&gt; 3, 5, NA, NA, 3, 1, 3, 3, 1, 5, 5, 1, 1, 1, 1, 5, 5… ## $ mat_bfeed_6mon_03 &lt;dbl&gt; 3, 5, NA, 3, 3, 1, 3, 3, 1, 5, 5, 1, 1, 1, 1, 5, 5,… ## $ mat_bfeed_6mon_04 &lt;dbl&gt; 3, 5, 1, 3, 3, 1, 3, 5, 1, 5, 5, 1, 1, 1, 1, 5, 5, … ## $ mat_bfeed_6mon_05 &lt;dbl&gt; 3, 5, 1, 3, 3, 1, 3, 5, 1, 5, 5, 1, 1, 1, 1, 5, 5, … ## $ mat_bfeed_6mon_06 &lt;dbl&gt; 3, 5, 1, 3, 3, 1, 3, 5, 1, 5, 5, 1, 1, 1, 1, 5, 5, … ## $ mat_bfeed_6mon_07 &lt;dbl&gt; 3, 5, 1, 3, 3, 1, 3, 5, 1, 5, 5, 1, 1, 1, 1, 5, 5, … ## $ mat_bfeed_6mon_08 &lt;dbl&gt; 3, 5, 1, 3, 3, 1, 3, 5, 1, 5, 5, 1, 1, 1, 1, 5, 5, … ## $ mat_bfeed_6mon_09 &lt;dbl&gt; 3, 5, 1, 3, 3, 1, 3, 5, 1, 5, 5, 1, 1, 1, 1, 5, 5, … ## $ mat_bfeed_6mon_10 &lt;dbl&gt; 3, 5, 1, 3, 3, 1, 3, 5, 1, 5, 5, 1, 1, 1, 1, 5, 5, … ## $ mat_bfeed_6mon_11 &lt;dbl&gt; 3, 5, 1, 3, 3, 1, 3, 5, 1, 5, 5, 1, 1, 1, 1, 5, 5, … ## $ mat_bfeed_6mon_12 &lt;dbl&gt; 3, 5, 1, 3, 3, 1, 3, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5, … ## $ mat_bfeed_6mon_13 &lt;dbl&gt; 3, 5, 1, 3, 3, 1, 3, 5, 1, 5, 5, 1, 3, 1, 1, 5, 5, … ## $ minage_fem_leg_95 &lt;dbl&gt; 4, 4, 5, NA, 5, NA, 5, 4, NA, NA, 5, NA, NA, 5, 5, … ## $ minage_fem_leg_96 &lt;dbl&gt; 4, 4, 5, NA, 5, NA, 5, 4, NA, NA, 5, NA, NA, 5, 5, … ## $ minage_fem_leg_97 &lt;dbl&gt; 4, 4, 5, NA, 5, NA, 5, 4, NA, NA, 5, NA, NA, 5, 5, … ## $ minage_fem_leg_98 &lt;dbl&gt; 4, 4, 5, NA, 5, NA, 5, 4, NA, NA, 5, NA, NA, 5, 5, … ## $ minage_fem_leg_99 &lt;dbl&gt; 4, 4, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_00 &lt;dbl&gt; 4, 4, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_01 &lt;dbl&gt; 4, 4, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_02 &lt;dbl&gt; 4, 4, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_03 &lt;dbl&gt; 4, 5, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_04 &lt;dbl&gt; 4, 5, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_05 &lt;dbl&gt; 4, 5, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_06 &lt;dbl&gt; 4, 5, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_07 &lt;dbl&gt; 4, 5, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_08 &lt;dbl&gt; 4, 5, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_09 &lt;dbl&gt; 4, 5, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_10 &lt;dbl&gt; 4, 5, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_11 &lt;dbl&gt; 4, 5, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ minage_fem_leg_12 &lt;dbl&gt; 4, 5, 5, NA, 5, NA, 5, 4, NA, NA, 4, NA, NA, 5, 5, … ## $ legal_diff_leg_95 &lt;dbl&gt; 3, 3, 2, NA, 5, NA, 5, 3, NA, NA, 5, NA, NA, 2, 5, … ## $ legal_diff_leg_96 &lt;dbl&gt; 3, 3, 2, NA, 5, NA, 5, 3, NA, NA, 5, NA, NA, 2, 5, … ## $ legal_diff_leg_97 &lt;dbl&gt; 3, 3, 2, NA, 5, NA, 5, 3, NA, NA, 5, NA, NA, 2, 5, … ## $ legal_diff_leg_98 &lt;dbl&gt; 3, 3, 2, NA, 5, NA, 5, 3, NA, NA, 5, NA, NA, 2, 5, … ## $ legal_diff_leg_99 &lt;dbl&gt; 3, 3, 2, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_00 &lt;dbl&gt; 3, 3, 2, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_01 &lt;dbl&gt; 3, 3, 2, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_02 &lt;dbl&gt; 3, 3, 2, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_03 &lt;dbl&gt; 3, 5, 2, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_04 &lt;dbl&gt; 3, 5, 2, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_05 &lt;dbl&gt; 3, 5, 5, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_06 &lt;dbl&gt; 3, 5, 5, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_07 &lt;dbl&gt; 3, 5, 5, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_08 &lt;dbl&gt; 3, 5, 5, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_09 &lt;dbl&gt; 3, 5, 5, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_10 &lt;dbl&gt; 3, 5, 5, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_11 &lt;dbl&gt; 3, 5, 5, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_leg_12 &lt;dbl&gt; 3, 5, 5, NA, 5, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ minage_fem_pc_95 &lt;dbl&gt; 3, 4, 5, NA, 3, NA, 4, 4, NA, NA, 5, NA, NA, 5, 4, … ## $ minage_fem_pc_96 &lt;dbl&gt; 3, 4, 5, NA, 3, NA, 4, 4, NA, NA, 5, NA, NA, 5, 4, … ## $ minage_fem_pc_97 &lt;dbl&gt; 3, 4, 5, NA, 3, NA, 4, 4, NA, NA, 5, NA, NA, 5, 4, … ## $ minage_fem_pc_98 &lt;dbl&gt; 3, 4, 5, NA, 3, NA, 4, 4, NA, NA, 5, NA, NA, 5, 4, … ## $ minage_fem_pc_99 &lt;dbl&gt; 3, 4, 5, NA, 3, NA, 4, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_00 &lt;dbl&gt; 3, 4, 5, NA, 3, NA, 4, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_01 &lt;dbl&gt; 3, 4, 5, NA, 3, NA, 4, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_02 &lt;dbl&gt; 3, 4, 5, NA, 3, NA, 4, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_03 &lt;dbl&gt; 3, 5, 5, NA, 3, NA, 4, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_04 &lt;dbl&gt; 3, 5, 5, NA, 3, NA, 4, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_05 &lt;dbl&gt; 3, 5, 5, NA, 3, NA, 4, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_06 &lt;dbl&gt; 3, 5, 5, NA, 3, NA, 4, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_07 &lt;dbl&gt; 3, 5, 5, NA, 3, NA, 4, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_08 &lt;dbl&gt; 3, 5, 5, NA, 3, NA, 4, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_09 &lt;dbl&gt; 3, 5, 5, NA, 3, NA, 5, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_10 &lt;dbl&gt; 3, 5, 5, NA, 3, NA, 5, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_11 &lt;dbl&gt; 3, 5, 5, NA, 3, NA, 5, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ minage_fem_pc_12 &lt;dbl&gt; 3, 5, 5, NA, 3, NA, 5, 4, NA, NA, 4, NA, NA, 5, 4, … ## $ legal_diff_pc_95 &lt;dbl&gt; 2, 3, 2, NA, 3, NA, 3, 3, NA, NA, 5, NA, NA, 2, 5, … ## $ legal_diff_pc_96 &lt;dbl&gt; 2, 3, 2, NA, 3, NA, 3, 3, NA, NA, 5, NA, NA, 2, 5, … ## $ legal_diff_pc_97 &lt;dbl&gt; 2, 3, 2, NA, 3, NA, 3, 3, NA, NA, 5, NA, NA, 2, 5, … ## $ legal_diff_pc_98 &lt;dbl&gt; 2, 3, 2, NA, 3, NA, 3, 3, NA, NA, 5, NA, NA, 2, 5, … ## $ legal_diff_pc_99 &lt;dbl&gt; 2, 3, 2, NA, 3, NA, 3, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_00 &lt;dbl&gt; 2, 3, 2, NA, 3, NA, 3, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_01 &lt;dbl&gt; 2, 3, 2, NA, 3, NA, 3, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_02 &lt;dbl&gt; 2, 3, 2, NA, 3, NA, 3, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_03 &lt;dbl&gt; 2, 5, 2, NA, 3, NA, 3, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_04 &lt;dbl&gt; 2, 5, 2, NA, 3, NA, 3, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_05 &lt;dbl&gt; 2, 5, 5, NA, 3, NA, 3, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_06 &lt;dbl&gt; 2, 5, 5, NA, 3, NA, 3, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_07 &lt;dbl&gt; 2, 5, 5, NA, 3, NA, 3, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_08 &lt;dbl&gt; 2, 5, 5, NA, 3, NA, 3, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_09 &lt;dbl&gt; 2, 5, 5, NA, 3, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_10 &lt;dbl&gt; 2, 5, 5, NA, 3, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_11 &lt;dbl&gt; 2, 5, 5, NA, 3, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ legal_diff_pc_12 &lt;dbl&gt; 2, 5, 5, NA, 3, NA, 5, 3, NA, NA, 3, NA, NA, 2, 5, … ## $ minwage_ppp_2013 &lt;dbl&gt; 4, 5, 5, NA, 4, NA, NA, 4, NA, NA, 4, NA, NA, 4, NA… ## $ mw_overtime &lt;dbl&gt; NA, 5, 2, NA, 2, NA, 5, 5, NA, NA, 5, NA, NA, -9, N… ## $ oecd &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, … 6.1.2 步驟二：選取所需變項 matleave &lt;- rawdata[ , c(3, 6:24)] glimpse(matleave) ## Observations: 197 ## Variables: 20 ## $ iso3 &lt;chr&gt; &quot;AFG&quot;, &quot;ALB&quot;, &quot;DZA&quot;, &quot;AND&quot;, &quot;AGO&quot;, &quot;ATG&quot;, &quot;ARG&quot;, &quot;ARM&quot;, &quot;… ## $ matleave_95 &lt;dbl&gt; 2, 5, 3, 2, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 3, 2, 3, … ## $ matleave_96 &lt;dbl&gt; 2, 5, 3, 2, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 3, 2, 3, … ## $ matleave_97 &lt;dbl&gt; 2, 5, 3, 2, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 3, 2, 3, … ## $ matleave_98 &lt;dbl&gt; 2, 5, 3, 2, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, 2, 3, … ## $ matleave_99 &lt;dbl&gt; 2, 5, 3, 2, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, 2, 3, … ## $ matleave_00 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, 3, 3, … ## $ matleave_01 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, 3, 3, … ## $ matleave_02 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, 3, 3, … ## $ matleave_03 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 3, 1, 5, 5, 2, 2, 2, 2, 5, 4, 3, 3, … ## $ matleave_04 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 2, 2, 5, 4, 3, 3, … ## $ matleave_05 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 2, 2, 5, 4, 3, 3, … ## $ matleave_06 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 3, 2, 5, 4, 3, 3, … ## $ matleave_07 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 3, 2, 5, 4, 3, 3, … ## $ matleave_08 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 3, 2, 5, 4, 3, 3, … ## $ matleave_09 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 1, 5, 5, 2, 2, 3, 2, 5, 4, 3, 3, … ## $ matleave_10 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, NA, 5, 5, 2, 2, 3, 2, 5, 4, 3, 3,… ## $ matleave_11 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 3, 5, 5, 2, 2, 3, 2, 5, 4, 3, 3, … ## $ matleave_12 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 3, 5, 5, 2, 2, 3, 2, 5, 4, 3, 3, … ## $ matleave_13 &lt;dbl&gt; 2, 5, 3, 3, 2, 2, 2, 5, 3, 5, 5, 2, 2, 3, 2, 5, 4, 3, 3, … 選擇所需變項欄必須要把條件寫在rawdata中括號的逗號右側。我需要iso3的欄位作為國名的代號（iso3變項內的值為國家的三碼代號，例如台灣為TWN）。而6:24則為matleave_95至matleave_13的所有欄位。我這邊是選出第三行、與六至二十四行。c(3, 6:24)為標準兩個vector相串連（concatinating）的結果，6:24相當於產生c(6, 7, 8, …, 24)，而c(3, 6:24)則是把3擺在6:24之前。 6.1.3 步驟三：將NA值取代為0。 matleave[is.na(matleave)] &lt;- 0 NA 相當於「Not Available」或「Not a Value」的意思。通常若資料沒填到的話會有兩種情形，一種是什麼都沒有，系統會自動塞NA，另一種是系統會塞入一個長度為零的空字串「\"\"」。matleave[is.na(matleave)]會選擇所有是NA的資料。is.na(matleave)會傳回一個包含TRUE與FALSE的向量。而matleave的中括號中若有TRUE或FALSE的向量，就會篩取出該位置為TRUE的資料。該操作的目的是以0取代NA的資料格，以避免彙整運算或繪圖時產生錯誤。 有一些檢測是否data.frame或vector中還有沒有NA的方法。 * 方法一：最簡單的是用anyNA(matleave)，如果還有NA的話，就會傳回TRUE；否則就會傳回FALSE。 * 方法二：跑跑看sum(is.na(matleave))的結果會不會等於0。如果還有NA的話is.na(matleave)內的結果就還會包含TRUE。TRUE如果被當成數字加總是1，FALSE為0。所以如果全部加總起來不是0，那就代表還有NA。 6.1.4 步驟四：篩出所需要的資料列 m5 &lt;- matleave[matleave$matleave_13 == 5, ] m55&lt;- m5[m5$matleave_95 == 5,] 我先篩取出matleave_13年資料為5的欄位，再從中篩取出matleave_95年資料為5的資料。在這過程要特別留意，matleave[matleave$'matleave_13' == 5, ]逗號前面為一個和matleave等大小、形狀相同的T/F向量。 建議若初學之時感到疑惑，在兩行程式碼前後可用dim()、str()、nrow()等函式觀察兩個階段分別剩下多少筆資料，或分別印出matleave$matleave_13、matleave$matleave_13==5、length(matleave$matleave_13==5)來觀察。 6.1.5 步驟五：繪圖 par(mfrow=c(4,6), mai= c(0.2, 0.2, 0.2, 0.2)) for (i in c(1:nrow(m55))){ barplot(unlist(m55[i,-1]), border=NA, space=0,xaxt=&quot;n&quot;, yaxt=&quot;n&quot;, ylim = c(0,5)) title(m55[i,1], line = -4, cex.main=3) } 基本繪圖很簡單，就只需要plot(x)或plot(x, y)，x與y之處分別給他向量，就可以繪製成散布圖（scatter）。但沒有調整過的圖通常很醜，所以，通常我會假想一個預期希望看見的樣子，然後朝那個目標逐一測試繪圖的參數（Arguments），過程概略如下。 先plot一列資料看看。 錯誤訊息說height必須要是一個vector，用?barplot查詢一下他的用法為barplot(height, …)，第一個參數必須要為height，顯然是個數值資料。因此自我檢查後，想起第一個變項欄為iso3國碼，因此我除了篩出第二列出來繪圖外，另外把第一欄給刪除。 結果仍然是同樣的錯誤，顯然錯誤仍沒解決。因此，「經驗老道（意味著初學者可能沒辦法自己想到）」的我想到，搞不好這個資料型態不是vector或matrix，所以畫不出來。照道理來說height應該要是個numeric vector。因此用class()函式來測試一下資料的型態。 class(matleave[2, -1]) ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; 果不其然，雖然取的是一橫列資料，但他不是一個vector，他相當於是一個只有一筆資料的data.frame，雖然我們「感覺上」那是一列資料，很像vector，但他不是就不是，想太多！我確定這樣篩出來是我要繪製的資料項目沒錯，但我需要它是一個vector而不是data.frame，此時就要用變數型態的轉換，一個無論多大的data.frame想要拆成一長條的vector，就是用unlist()來轉，便會產生vector。此時我便可利用barplot()將其繪製為長條圖如下。 class(unlist(matleave[2, -1])) ## [1] &quot;numeric&quot; barplot(unlist(m55[2, -1])) 接下來我會一一測試barplot()的參數把他畫成我要的樣子，他有哪些參數可查詢?barplot。最後我所得到的長條圖如下。ylim是為了確保之後要繪製等級4至1時，每個小圖仍然是等高的。space指的是bar之間的間隙、border顧名思義、並利用xaxt=“n”將x軸與y軸座標系隱藏起來。 barplot(unlist(m55[2, -1])) barplot(unlist(m55[2, -1]), ylim=c(0, 5)) barplot(unlist(m55[2, -1]), ylim=c(0, 5), space=0) barplot(unlist(m55[2, -1]), ylim=c(0, 5), space=0, border=NA) barplot(unlist(m55[2, -1]), ylim=c(0, 5), space=0, border=NA, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;) 但此時我不只要畫一張圖，數一數一共要畫18張子圖，先畫六張的程式碼如下。底下可以看見每一行非常相似且一致的特徵，僅有m55內的「資料列索引」由1被列出至6。 barplot(unlist(m55[1, -1]), ylim=c(0, 5), space=0, border=NA, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;) barplot(unlist(m55[2, -1]), ylim=c(0, 5), space=0, border=NA, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;) barplot(unlist(m55[3, -1]), ylim=c(0, 5), space=0, border=NA, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;) barplot(unlist(m55[4, -1]), ylim=c(0, 5), space=0, border=NA, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;) barplot(unlist(m55[5, -1]), ylim=c(0, 5), space=0, border=NA, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;) barplot(unlist(m55[6, -1]), ylim=c(0, 5), space=0, border=NA, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;) 這種完全重複、只有索引相異的指令，最好的方法是用迴圈（for-loop）的方式將相同的程式碼，用一個新的變數來控制要畫哪一列，從1至6之間做六次。 for(i in 1:6){ barplot(unlist(m55[i, -1]), ylim=c(0, 5), space=0, border=NA, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;) } 所以，確定可以用for迴圈幫我畫出六張圖，我就把1:6改成1:nrow(m55)，nrow(m55)為m55的資料筆數。 但是像上面這樣做只會讓程式碼重新畫十八張圖。因此要上網查詢看看如何繪製子圖。你可以google「subplot in R」或「multiple plot in R」應該都可以找到相同的結果。有一個網頁是R Multiple Plot Using par Function，他告訴你說用par()這個函式可以控制把數個子圖畫在同一張圖上。你可以查詢看看?par的參數，並且找到mai、mfcol和mfrow等參數的說明如下，並據此繪製成下圖。 mai: A numerical vector of the form c(bottom, left, top, right) which gives the margin size specified in inches. mfcol, mfrow: A vector of the form c(nr, nc). Subsequent figures will be drawn in an nr-by-nc array on the device by columns (mfcol), or rows (mfrow), respectively. par(mfrow=c(3,2), mai= c(0.2, 0.2, 0.2, 0.2)) for(i in 1:nrow(m55)){ barplot(unlist(m55[i, -1]), ylim=c(0, 5), space=0, border=NA, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;) } 從上圖中可以看見我幾乎快完成了。只差把國名，也就是iso3，打在該國的方塊上。在barplot上面打標題可以google「barplot title R」他會教你怎麼上title，但你也可以查詢「plot annotation R」也就是在圖上面繪製文字（和barplot分開繪製，會比較好控制字型，程式語言把這種上文字稱為annotation）。此時，若直接打title(m55[i, 1])已經能夠繪製文字，但不是我要的大小，我會進一步查詢?title怎麼控制文字大小和文字的「基線」，也就是把哪裡當成文字的底線。經查詢後，控制文字大小用cex.main、控制基線用line。然後我就自己測試看看大小和基線，直到我滿意如下圖。 par(mfrow=c(4,6), mai= c(0.2, 0.2, 0.2, 0.2)) for (i in 1:nrow(m55)){ barplot(unlist(m55[i,-1]), ylim=c(0,5), space=0, border=NA, xaxt=&quot;n&quot;,yaxt=&quot;n&quot;) title(m55[i,1], line = -4, cex.main=3) } "],
["-csv-.html", "Chapter 7 讀取CSV：以台北市竊盜案分佈為例 7.1 分析步驟 7.2 綜合：資料彙整（Data Summerazation）", " Chapter 7 讀取CSV：以台北市竊盜案分佈為例 copy from google docs copy google docs to paper to retrieve figs save figs to folder link to figs check concsistency between rmd and google docs 除了延續前節篩取資料列和選取變項欄外，本節的重點在於利用count()或tapply()等函式進行計數。一般來說，觀察得到的資料是觀察紀錄（例如在路口蹲點計算車流或者經過的行人類型）。但能夠被計算或比較的是觀察紀錄後的計量，也就是具目的性地抽取數個變項，然後看看各個變項組合有多少筆適才的觀察紀錄。最後，為了一般讀者閱讀，會經常把其中兩個變項抽出來，然後把一個變項當成欄，一個變項當成列，然後交叉呈現兩個變項下的資料計數。 7.1 分析步驟 7.1.1 步驟一：摘要與提要 讀取CSV檔 library(tidyverse) ## Warning: package &#39;tidyverse&#39; was built under R version 3.5.2 ## ── Attaching packages ────────────────────────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.2.1 ✓ purrr 0.3.3 ## ✓ tibble 2.1.3 ✓ stringr 1.4.0 ## ✓ tidyr 1.0.2 ✓ forcats 0.4.0 ## ✓ readr 1.3.1 ## Warning: package &#39;ggplot2&#39; was built under R version 3.5.2 ## Warning: package &#39;tibble&#39; was built under R version 3.5.2 ## Warning: package &#39;purrr&#39; was built under R version 3.5.2 ## Warning: package &#39;stringr&#39; was built under R version 3.5.2 ## Warning: package &#39;forcats&#39; was built under R version 3.5.2 ## ── Conflicts ───────────────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x purrr::flatten() masks jsonlite::flatten() ## x dplyr::lag() masks stats::lag() options(stringsAsFactors = FALSE) 7.1.2 步驟二：載入台北市竊盜案資料 df &lt;- read.csv(url, fileEncoding = \"big5\")這行的意思是把url用read.csv()這個函式讀取。讀取的同時，由於一般EXCEL的中文編碼為BIG5，所以該文件八成是該台北市政單位還用EXCEL在編資料，所以要跟程式碼講說，這個網址所指到的檔案編碼為BIG5。請自行嘗試看看如果沒有加入fileEncoding會有什麼錯誤訊息。 url &lt;- &quot;https://data.taipei/api/getDatasetInfo/downloadResource?id=68785231-d6c5-47a1-b001-77eec70bec02&amp;rid=34a4a431-f04d-474a-8e72-8d3f586db3df&quot; df &lt;- read.csv(url, fileEncoding = &quot;big5&quot;) 部分電腦可能為無法直接讀取，此時可以先自行把檔案下載下來後再讀取，唯獨記得要把該資料檔拖至本專案的資料夾內。例如以下面的例子來說，我把tptheft.csv拖至現在專案中的data資料夾，因此以下路徑正確而可以讀取。從不同的瀏覽器下載下來可能會產生不一樣的csv檔，如果無法開啟可以多嘗試不同的瀏覽器看看。 df &lt;- read.csv(&quot;data/tptheft.csv&quot;, fileEncoding = &quot;big5&quot;) 注意：可用View()概略瀏覽該data.frame的變項值與變項。 7.1.3 步驟三：產生新的變項 發生時段我打算取出前面的數字來代表時間就好，發生地點我打算只取出行政區名，其他地址不要。邏輯上，我要把那串字取出第x個字到第y個字，所以要用substr()這個函式，或者未來會教到的stringr::str_sub()函式。請用?substr查詢其用法和意義「getting sub string since x to y」。 df$time &lt;- substr(df$發生時段, 1, 2) df$region &lt;- substr(df$發生.現.地點, 4, 5) 另外我有發現前面幾年的資料特別少，所以我想要取出現在是幾年。我用str()觀察df後發現「發生日期」為一個整數，那代表我可以對其做加減乘除做運算。該變項的數值最多有7位，部分為6位，因為資料是從99年跨至100至104年。我若要取出這是幾年的資料，經觀察後我打算將該整數除以10000取商，剛好可以獲得年份的資料。除法取商的語法為`%/%``。 df$year &lt;- df$發生.現.日期 %/% 10000 7.1.4 步驟四：整理、清理資料 該資料可發現，有幾年的資料在特別早之前，似乎直到104年才逐漸穩定，但不太確定。所以我首先要刪除那些資料太少的年份。所以我打算用table()這個函式看看究竟每個年份出現幾次。 table(df$time) ## ## 00 02 04 06 08 10 12 14 16 18 20 22 ## 295 191 151 184 270 327 339 315 236 275 272 198 table(df$region) ## ## 1~ 15 16 25 2段 31 40 61 七堵 三峽 三民 三芝 三重 中和 中壢 中山 ## 1 2 1 1 1 2 1 1 2 3 1 1 35 18 8 366 ## 中正 五股 信義 內埔 內湖 八德 北區 北屯 北投 南屯 南港 土城 士林 大同 大安 大溪 ## 212 3 180 1 252 2 2 2 279 2 158 9 307 135 268 6 ## 安樂 宜蘭 左營 平鎮 後龍 文山 新埔 新店 新莊 新豐 暖暖 東區 松山 板橋 林口 桃園 ## 2 1 2 2 1 182 1 17 10 5 2 3 187 20 2 5 ## 楊梅 樹林 橫山 水上 永和 汐止 泰山 淡水 深坑 湖口 湖西 田尾 萬華 竹山 竹東 芎林 ## 5 4 1 1 11 12 2 18 2 1 1 1 264 1 1 1 ## 芳苑 蘆洲 虎尾 街9 西區 觀音 過洋 頭份 頭屋 鹿港 龍潭 龜山 ## 1 4 1 1 1 2 1 1 1 1 3 6 table(df$year) ## ## 104 105 106 107 108 ## 777 742 591 531 412 從上述彙整資料看來，資料把不是台北市的區域都給算進來了，所以要篩選台北市的區域，經過篩選後剩下2608筆資料。因為這些需要的資料都是文字型態的資料，且有數個，所以我們可以使用%in%這個運算符號，他指的是該變項的值是不是後面這個vector中的其中一個值。 df &lt;- df[df$region %in% c(&quot;中山&quot;, &quot;中正&quot;, &quot;信義&quot;, &quot;內湖&quot;, &quot;北投&quot;, &quot;南港&quot;, &quot;大同&quot;, &quot;大安&quot;, &quot;士林&quot;, &quot;松山&quot;, &quot;萬華&quot;, &quot;南港&quot;), ] 上述案例只能根據一個資料維度或根據一個變項來做計數彙整。然而，我們希望知道，不同的時間和不同的地點，是否竊盜比例會有所不同，此時我們需要同時考慮兩個變項。 res &lt;- table(df$region, df$time) 7.1.5 步驟五：視覺化 mosaicplot()非常擅長視覺化兩個離散變項，並透過自動化百分比的設置，可以讓資料探索者得知，哪些變項的大小分佈跟其他不同。 mosaicplot(res) mosaicplot(res, main=&quot;mosaic plot&quot;) 但是，類似上述繪圖無法顯示中文要怎麼辦？未來R的繪圖尤其是Mac會經常遇到無法顯示中文的問題，Windows未來在用ggplot2套件進行繪圖時也會遇到相同的問題。因此，我們需要告訴電腦要用什麼字體。例如Mac上可以用以下兩種字體。 par(family=(&#39;Heiti TC Light&#39;)) # par(family=(&#39;STKaiti&#39;)) mosaicplot(res, main=&quot;mosaic plot&quot;) 用自訂顏色來觀察會更清楚，一共有十二個區，就給予十二種顏色。 colors &lt;- c(&#39;#D0104C&#39;, &#39;#DB4D6D&#39;, &#39;#E83015&#39;, &#39;#F75C2F&#39;, &#39;#E79460&#39;, &#39;#E98B2A&#39;, &#39;#9B6E23&#39;, &#39;#F7C242&#39;, &#39;#BEC23F&#39;, &#39;#90B44B&#39;, &#39;#66BAB7&#39;, &#39;#1E88A8&#39;) par(family=(&#39;STKaiti&#39;)) mosaicplot(res, color=colors, border=0, off = 3, main=&quot;Theft rate of Taipei city (region by hour)&quot;) 7.2 綜合：資料彙整（Data Summerazation） 在R中可以依照某個類別變數來計算次數、平均的函式有很多個。 7.2.1 方法一：tapply() tapply()是原始base套件中的函式，其家族還有sapply()、lapply()、apply()等函式。但在快速的資料探索性分析中，反而會比較常用table()，而善於操作變項的統計書籍則常用aggreage()，後期開發的dplyr套件則有count()。在未來的練習中，最常用的是count()。 7.2.2 方法二：table() 以下為table()的用法，他也可以用於單一變項的計數，且他產生的結果並非一個data.frame而是一個資料型態稱為「table」，查詢看看?table以獲得更詳盡的說明。 res &lt;- table(df$time, df$region) class(res) ## [1] &quot;table&quot; 7.2.3 方法三：count() 以下為count()的用法。注意，將df根據time與region兩個類別變項計數後，會多一個n的變項，指出某個時間、某個區域有多少起竊盜案件。這樣的型態是統計學最常看見的型態，也就是variable-based的型態。但如果我們希望它變成一個「二維」的表格，亦即欄和列分別代表兩個不同的變項，那就需要用tidyr的函式spread()將你所要展開到欄的那個變項，和計數後的數字n作為參數，展開為一個二維的表格如下（你也可以選擇展開time）。 關於tidyr::spread()這樣的表示法，在::前為套件名稱，當程式尚未用library(tidyr)載入該套件，或者你只打算用spread()這麼一次，可以用這種表示法，指出這個spread()為tidyr這個套件中的函式。據此，R會自動載入該套件並執行該函式。 res5 &lt;- count(df, time, region) ?count head(res5) ## # A tibble: 6 x 3 ## time region n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 00 中山 60 ## 2 00 中正 15 ## 3 00 信義 24 ## 4 00 內湖 20 ## 5 00 北投 21 ## 6 00 南港 16 res6 &lt;- tidyr::spread(res5, region, n, fill = 0) res6 ## # A tibble: 12 x 12 ## time 中山 中正 信義 內湖 北投 南港 士林 大同 大安 松山 萬華 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 00 60 15 24 20 21 16 24 14 23 4 14 ## 2 02 22 17 9 13 13 12 25 7 12 10 21 ## 3 04 20 6 11 12 15 6 12 12 12 5 19 ## 4 06 18 17 13 16 22 12 15 9 18 11 19 ## 5 08 33 22 18 22 17 14 19 17 28 16 28 ## 6 10 35 19 14 32 30 16 30 11 29 32 33 ## 7 12 27 23 16 22 30 13 42 10 43 23 24 ## 8 14 35 17 15 34 31 18 34 19 29 19 21 ## 9 16 19 15 6 23 31 8 26 11 21 18 21 ## 10 18 33 31 21 17 40 16 23 10 21 14 18 ## 11 20 34 12 19 25 15 19 36 9 20 23 32 ## 12 22 30 18 14 16 14 8 21 6 12 12 14 7.2.4 練習 用tapply()、table()和count()與spread()後所跑出來的表格看似都是欄和列分別有兩個變項，請用class()測試看看，用不同的方法所產生的資料型態有何差異。 "]
]
